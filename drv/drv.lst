ca65 V2.19 - Git e5f4ca6
Main file   : drv.s
Current file: drv.s

000000r 1               	.export		__cc
000000r 1               	.export		__ss
000000r 1               	.export		__mm
000000r 1               	.export		__hh
000000r 1               	.export		drv_main
000000r 1               	.export		drv_init
000000r 1               	.export		drv_sndreq
000000r 1               	.export		set_dpcm
000000r 1               
000000r 1               	.include	"drv.inc"
000000r 2               
000000r 2               	.setcpu		"6502"
000000r 2               
000000r 2               	.include	"nes.inc"
000000r 3               ;
000000r 3               ; NES definitions
000000r 3               ;
000000r 3               
000000r 3               .ifndef	__NES_INC__
000000r 3               
000000r 3               .define	__NES_INC__
000000r 3               
000000r 3               ;; PPU defines
000000r 3               PPU_CTRL1	= $2000
000000r 3               PPU_CTRL2	= $2001
000000r 3               PPU_STATUS	= $2002
000000r 3               PPU_SPR_ADDR	= $2003
000000r 3               PPU_SPR_IO  	= $2004
000000r 3               PPU_VRAM_ADDR1	= $2005
000000r 3               PPU_VRAM_ADDR2	= $2006
000000r 3               PPU_VRAM_IO	= $2007
000000r 3               
000000r 3               ;; APU defines
000000r 3               APU_PULSE1CTRL  = $4000         ; Pulse #1 Control Register (W)
000000r 3               APU_PULSE1RAMP  = $4001         ; Pulse #1 Ramp Control Register (W)
000000r 3               APU_PULSE1FTUNE = $4002         ; Pulse #1 Fine Tune (FT) Register (W)
000000r 3               APU_PULSE1CTUNE = $4003         ; Pulse #1 Coarse Tune (CT) Register (W)
000000r 3               APU_PULSE2CTRL  = $4004         ; Pulse #2 Control Register (W)
000000r 3               APU_PULSE2RAMP  = $4005         ; Pulse #2 Ramp Control Register (W)
000000r 3               APU_PULSE2FTUNE = $4006         ; Pulse #2 Fine Tune Register (W)
000000r 3               APU_PULSE2STUNE = $4007         ; Pulse #2 Coarse Tune Register (W)
000000r 3               APU_TRICTRL1    = $4008         ; Triangle Control Register #1 (W)
000000r 3               APU_TRICTRL2    = $4009         ; Triangle Control Register #2 (?)
000000r 3               APU_TRIFREQ1    = $400A         ; Triangle Frequency Register #1 (W)
000000r 3               APU_TRIFREQ2    = $400B         ; Triangle Frequency Register #2 (W)
000000r 3               APU_NOISECTRL   = $400C         ; Noise Control Register #1 (W)
000000r 3               ;;APU_ = $400D  ; Unused (???)
000000r 3               APU_NOISEFREQ1  = $400E         ; Noise Frequency Register #1 (W)
000000r 3               APU_NOISEFREQ2  = $400F         ; Noise Frequency Register #2 (W)
000000r 3               APU_MODCTRL     = $4010         ; Delta Modulation Control Register (W)
000000r 3               APU_MODDA       = $4011         ; Delta Modulation D/A Register (W)
000000r 3               APU_MODADDR     = $4012         ; Delta Modulation Address Register (W)
000000r 3               APU_MODLEN      = $4013         ; Delta Modulation Data Length Register (W)
000000r 3               APU_SPR_DMA    	= $4014         ; Sprite DMA Register (W)
000000r 3               APU_CHANCTRL   	= $4015         ; Sound/Vertical Clock Signal Register (R)
000000r 3               APU_PAD1       	= $4016         ; Joypad #1 (RW)
000000r 3               APU_PAD2	= $4017         ; Joypad #2/SOFTCLK (RW)
000000r 3               
000000r 3               .endif
000000r 3               
000000r 2               	.include	"macro.inc"
000000r 3               
000000r 3               
000000r 3               ;=======================================================================
000000r 3               ;	Macros
000000r 3               ;-----------------------------------------------------------------------
000000r 3               
000000r 3               .MACPACK generic
000000r 4               
000000r 4               ; add - Add without carry
000000r 4               .macro  add     Arg1, Arg2
000000r 4                       clc
000000r 4                       .if .paramcount = 2
000000r 4                               adc     Arg1, Arg2
000000r 4                       .else
000000r 4                               adc     Arg1
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               
000000r 4               ; sub - subtract without borrow
000000r 4               .macro  sub     Arg1, Arg2
000000r 4                       sec
000000r 4                       .if .paramcount = 2
000000r 4                               sbc     Arg1, Arg2
000000r 4                       .else
000000r 4                               sbc     Arg1
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               
000000r 4               ; bge - jump if unsigned greater or equal
000000r 4               .macro  bge     Arg
000000r 4                       bcs     Arg
000000r 4               .endmacro
000000r 4               
000000r 4               ; blt - Jump if unsigned less
000000r 4               .macro  blt     Arg
000000r 4                       bcc     Arg
000000r 4               .endmacro
000000r 4               
000000r 4               ; bgt - jump if unsigned greater
000000r 4               .macro  bgt     Arg
000000r 4                       .local  L
000000r 4                       beq     L
000000r 4                       bcs     Arg
000000r 4               L:
000000r 4               .endmacro
000000r 4               
000000r 4               ; ble - jump if unsigned less or equal
000000r 4               .macro  ble     Arg
000000r 4                       beq     Arg
000000r 4                       bcc     Arg
000000r 4               .endmacro
000000r 4               
000000r 4               ; bnz - jump if not zero
000000r 4               .macro  bnz     Arg
000000r 4                       bne     Arg
000000r 4               .endmacro
000000r 4               
000000r 4               ; bze - jump if zero
000000r 4               .macro  bze     Arg
000000r 4                       beq     Arg
000000r 4               .endmacro
000000r 4               
000000r 4               
000000r 3               .MACPACK longbranch
000000r 4               .macro  jeq     Target
000000r 4                       .if     .match(Target, 0)
000000r 4                       bne     *+5
000000r 4                       jmp     Target
000000r 4                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 4                               beq     Target
000000r 4                       .else
000000r 4                               bne     *+5
000000r 4                               jmp     Target
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               .macro  jne     Target
000000r 4                       .if     .match(Target, 0)
000000r 4                               beq     *+5
000000r 4                               jmp     Target
000000r 4                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 4                               bne     Target
000000r 4                       .else
000000r 4                               beq     *+5
000000r 4                               jmp     Target
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               .macro  jmi     Target
000000r 4                       .if     .match(Target, 0)
000000r 4                               bpl     *+5
000000r 4                               jmp     Target
000000r 4                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 4                               bmi     Target
000000r 4                       .else
000000r 4                               bpl     *+5
000000r 4                               jmp     Target
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               .macro  jpl     Target
000000r 4                       .if     .match(Target, 0)
000000r 4                               bmi     *+5
000000r 4                               jmp     Target
000000r 4                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 4                               bpl     Target
000000r 4                       .else
000000r 4                               bmi     *+5
000000r 4                               jmp     Target
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               .macro  jcs     Target
000000r 4                       .if     .match(Target, 0)
000000r 4                               bcc     *+5
000000r 4                               jmp     Target
000000r 4                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 4                               bcs     Target
000000r 4                       .else
000000r 4                               bcc     *+5
000000r 4                               jmp     Target
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               .macro  jcc     Target
000000r 4                       .if     .match(Target, 0)
000000r 4                               bcs     *+5
000000r 4                               jmp     Target
000000r 4                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 4                               bcc     Target
000000r 4                       .else
000000r 4                               bcs     *+5
000000r 4                               jmp     Target
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               .macro  jvs     Target
000000r 4                       .if     .match(Target, 0)
000000r 4                               bvc     *+5
000000r 4                               jmp     Target
000000r 4                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 4                               bvs     Target
000000r 4                       .else
000000r 4                               bvc     *+5
000000r 4                               jmp     Target
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               .macro  jvc     Target
000000r 4                       .if     .match(Target, 0)
000000r 4                               bvs     *+5
000000r 4                               jmp     Target
000000r 4                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 4                               bvc     Target
000000r 4                       .else
000000r 4                               bvs     *+5
000000r 4                               jmp     Target
000000r 4                       .endif
000000r 4               .endmacro
000000r 4               
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	ax <= arg(mem16/imm16)
000000r 3               ;---------------------------------------
000000r 3               .macro	LDAX	arg
000000r 3               	.if (.match (.left (1, {arg}), #))
000000r 3               		; immediate mode
000000r 3               		lda     #<(.right (.tcount ({arg})-1, {arg}))
000000r 3               		ldx     #>(.right (.tcount ({arg})-1, {arg}))
000000r 3               	.else
000000r 3               		; assume absolute or zero page
000000r 3               		lda     arg
000000r 3               		ldx     1+(arg)
000000r 3               	.endif
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	arg(mem16) <= ax
000000r 3               ;---------------------------------------
000000r 3               .macro	STAX	arg
000000r 3               		; assume absolute or zero page
000000r 3               		sta     arg
000000r 3               		stx     1+(arg)
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	ax <= ax + arg(mem16/imm16)
000000r 3               ;---------------------------------------
000000r 3               .macro	ADDW	arg
000000r 3               	clc
000000r 3               	.if (.match (.left (1, {arg}), #))
000000r 3               		; immediate mode
000000r 3               		adc     #<(.right (.tcount ({arg})-1, {arg}))
000000r 3               		pha
000000r 3               		txa
000000r 3               		adc     #>(.right (.tcount ({arg})-1, {arg}))
000000r 3               		tax
000000r 3               		pla
000000r 3               	.else
000000r 3               		; assume absolute or zero page
000000r 3               		adc     arg
000000r 3               		pha
000000r 3               		txa
000000r 3               		adc     1+(arg)
000000r 3               		tax
000000r 3               		pla
000000r 3               	.endif
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	ax <= ax - arg(mem16/imm16)
000000r 3               ;---------------------------------------
000000r 3               .macro	SUBW	arg
000000r 3               	sec
000000r 3               	.if (.match (.left (1, {arg}), #))
000000r 3               		; immediate mode
000000r 3               		sbc     #<(.right (.tcount ({arg})-1, {arg}))
000000r 3               		pha
000000r 3               		txa
000000r 3               		sbc     #>(.right (.tcount ({arg})-1, {arg}))
000000r 3               		tax
000000r 3               		pla
000000r 3               	.else
000000r 3               		; assume absolute or zero page
000000r 3               		sbc     arg
000000r 3               		pha
000000r 3               		txa
000000r 3               		sbc     1+(arg)
000000r 3               		tax
000000r 3               		pla
000000r 3               	.endif
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	arg(ax/mem16)++
000000r 3               ;---------------------------------------
000000r 3               .macro	INCW	arg
000000r 3               	.local	Skip
000000r 3               
000000r 3               	.if (.blank(arg)) .or (.xmatch ({arg}, ax))
000000r 3               		add	#1
000000r 3               		bne	Skip
000000r 3               		inx
000000r 3               	.else
000000r 3               		inc	arg
000000r 3               		bne	Skip
000000r 3               		inc	1+(arg)
000000r 3               	.endif
000000r 3               Skip:
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	arg(ax/mem16)--
000000r 3               ;---------------------------------------
000000r 3               .macro	DECW	arg
000000r 3               	.local	Skip
000000r 3               	.if (.blank(arg)) .or (.match ({arg}, ax))
000000r 3               		sub	#1
000000r 3               		bcc	Skip
000000r 3               		dex
000000r 3               	.else
000000r 3               		pha
000000r 3               		lda	arg
000000r 3               		sub	#1
000000r 3               		sta	arg
000000r 3               		bcc	Skip
000000r 3               		dec	1+(arg)
000000r 3               		pla
000000r 3               	.endif
000000r 3               Skip:
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	arg(a/mem8) <<= c
000000r 3               ;---------------------------------------
000000r 3               .macro	SHL	arg, c
000000r 3               	.repeat	c
000000r 3               		asl	arg
000000r 3               	.endrepeat
000000r 3               .endmacro
000000r 3               
000000r 3               .macro	shl	arg, c
000000r 3               	.repeat	c
000000r 3               		asl	arg
000000r 3               	.endrepeat
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	arg(a/mem8) >>= c
000000r 3               ;---------------------------------------
000000r 3               .macro	SHR	arg, c
000000r 3               	.repeat	c
000000r 3               		lsr	arg
000000r 3               	.endrepeat
000000r 3               .endmacro
000000r 3               
000000r 3               .macro	shr	arg, c
000000r 3               	.repeat	c
000000r 3               		lsr	arg
000000r 3               	.endrepeat
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	a >>= c	（算術シフト）	※アキュムレータ限定
000000r 3               ;---------------------------------------
000000r 3               .macro	SAR	arg, c
000000r 3               
000000r 3               	.if (.match ({arg}, a))
000000r 3               
000000r 3               		.repeat	c
000000r 3               			cmp	#$80
000000r 3               			ror	a
000000r 3               		.endrepeat
000000r 3               	.else
000000r 3               		pha
000000r 3               		lda	arg
000000r 3               		.repeat	c
000000r 3               			cmp	#$80
000000r 3               			ror	a
000000r 3               		.endrepeat
000000r 3               		sta	arg
000000r 3               		pla
000000r 3               	.endif
000000r 3               
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	arg(mem16) <<= c
000000r 3               ;---------------------------------------
000000r 3               .macro	SHLW	arg, c
000000r 3               	.repeat	c
000000r 3               		asl	arg
000000r 3               		rol	1+(arg)
000000r 3               	.endrepeat
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	arg(mem16) >>= c
000000r 3               ;---------------------------------------
000000r 3               .macro	SHRW	arg, c
000000r 3               	.repeat	c
000000r 3               		lsr	1+(arg)
000000r 3               		ror	arg
000000r 3               	.endrepeat
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	arg(mem16) >>= c	（算術シフト）
000000r 3               ;---------------------------------------
000000r 3               .macro	SARW	arg, c
000000r 3               	pha
000000r 3               	lda	1+(arg)
000000r 3               	.repeat	c
000000r 3               		cmp	#$80
000000r 3               		ror	a
000000r 3               		ror	arg
000000r 3               	.endrepeat
000000r 3               	sta	1+(arg)
000000r 3               	pla
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	ＢＧアドレス計算
000000r 3               ;---------------------------------------
000000r 3               ;	ptx	X 座標
000000r 3               ;	pty	Y 座標
000000r 3               ;	scn	スクリーン番号
000000r 3               ;---------------------------------------
000000r 3               .define	ADDR_BG(ptx,pty,scn)	$2000 + (ptx) + ((pty)*32) + ((scn)*$400)
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	スプライトアドレス計算
000000r 3               ;---------------------------------------
000000r 3               ;	number	スプライト番号（0～63）
000000r 3               ;	member	アクセスするメンバー
000000r 3               ;		　ptx	Ｘ座標
000000r 3               ;		　pty	Ｙ座標
000000r 3               ;		　num	キャラクター
000000r 3               ;		　att	属性（パレットや反転など）
000000r 3               ;---------------------------------------
000000r 3               .define	ADDR_SPR(number,member)	_ppu_sprite_buff + ((number)*4) + SPR_ONE::member
000000r 3               
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	VBLANK 待ち
000000r 3               ;---------------------------------------
000000r 3               .macro	WAIT_VBLANK
000000r 3               	.local	Skip
000000r 3               Skip:	lda	PPU_STATUS
000000r 3               	bpl	Skip
000000r 3               .endmacro
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	NMI 割り込み待ち
000000r 3               ;---------------------------------------
000000r 3               .macro	WAIT_NMI
000000r 3               	.local	Skip
000000r 3               	lda	__cc
000000r 3               Skip:	cmp	__cc
000000r 3               	beq	Skip
000000r 3               .endmacro
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	ジャンプ
000000r 3               ;---------------------------------------
000000r 3               .macro	JMP_AX
000000r 3               	STAX	_JMP_Address
000000r 3               	jmp	(_JMP_Address)
000000r 3               .endmacro
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	コール
000000r 3               ;---------------------------------------
000000r 3               .macro	JSR_AX
000000r 3               	jsr	jsr_ax
000000r 3               .endmacro
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	バンク間コール
000000r 3               ;---------------------------------------
000000r 3               .macro	FARJSR	bank, adr
000000r 3               	LDAX	adr
000000r 3               	ldy	bank
000000r 3               	jsr	jsr_axy
000000r 3               .endmacro
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	画面表示
000000r 3               ;	※垂直同期を待つこと！！
000000r 3               ;---------------------------------------
000000r 3               .macro	DISP_SET
000000r 3               	sta	PPU_CTRL1
000000r 3               	sta	__Flag_2000
000000r 3               .endmacro
000000r 3               
000000r 3               .macro	DISP_SET1
000000r 3               	sta	PPU_CTRL1
000000r 3               	sta	__Flag_2000
000000r 3               .endmacro
000000r 3               
000000r 3               .macro	DISP_SET2
000000r 3               	sta	PPU_CTRL2
000000r 3               	sta	__Flag_2001
000000r 3               .endmacro
000000r 3               ;---------------------------------------
000000r 3               ;	画面表示
000000r 3               ;---------------------------------------
000000r 3               .macro	DISP_ON
000000r 3               	WAIT_VBLANK			;垂直同期まで待つ
000000r 3               	lda	#sysdef::PPU_Ctrl1_set	;割り込みは開始する。
000000r 3               	sta	PPU_CTRL1
000000r 3               	sta	__Flag_2000
000000r 3               	lda	#sysdef::PPU_Ctrl2_set	;MMC3 IRQの初期化のために、
000000r 3               	sta	__Flag_2001		;BG, Spr共に表示をonにする。
000000r 3               	sta	PPU_CTRL2		;
000000r 3               .endmacro
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	画面を消します。
000000r 3               ;	（消す前の状態は、維持）
000000r 3               ;---------------------------------------
000000r 3               .macro	DISP_OFF
000000r 3               	lda	#%00000000
000000r 3               	sta	PPU_CTRL1
000000r 3               	sta	PPU_CTRL2
000000r 3               	WAIT_VBLANK			;画面が消えるまで待つ
000000r 3               .endmacro
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	画面を元に戻します。
000000r 3               ;	（消す前の状態に、復帰）
000000r 3               ;---------------------------------------
000000r 3               .macro	DISP_RET
000000r 3               	WAIT_VBLANK			;垂直同期まで待つ
000000r 3               	lda	__Flag_2000
000000r 3               	sta	PPU_CTRL1
000000r 3               	lda	__Flag_2001
000000r 3               	sta	PPU_CTRL2
000000r 3               .endmacro
000000r 3               
000000r 3               ;---------------------------------------
000000r 3               ;	キー取得
000000r 3               ;---------------------------------------
000000r 3               ;●現在押されているキー
000000r 3               .macro	GET_PAD0
000000r 3               	lda	__PAD0
000000r 3               .endmacro
000000r 3               
000000r 3               .macro	GET_PAD1
000000r 3               	lda	__PAD1
000000r 3               .endmacro
000000r 3               
000000r 3               ;●離されたキー
000000r 3               .macro	GET_PAD0_REMOVE
000000r 3               	lda	__PAD0_REL
000000r 3               .endmacro
000000r 3               
000000r 3               .macro	GET_PAD1_REMOVE
000000r 3               	lda	__PAD1_REL
000000r 3               .endmacro
000000r 3               
000000r 3               ;●押されたキー
000000r 3               .macro	GET_PAD0_PRESS
000000r 3               	lda	__PAD0_TRG
000000r 3               .endmacro
000000r 3               
000000r 3               .macro	GET_PAD1_PRESS
000000r 3               	lda	__PAD1_TRG
000000r 3               .endmacro
000000r 3               
000000r 3               
000000r 2               
000000r 2               
000000r 2               MAX_TRACK 	=	16
000000r 2               LAST_TRACK	=	MAX_TRACK - 1
000000r 2               MAX_LOOP	=	3
000000r 2               
000000r 2               FRAG_KEYON			=	%00000001
000000r 2               FRAG_KEYON_CLR		=	%11111110
000000r 2               FRAG_KEYOFF			=	%00000010
000000r 2               FRAG_KEYOFF_CLR		=	%11111101
000000r 2               FRAG_LOAD			=	%00000100
000000r 2               FRAG_LOAD_CLR		=	%11111011
000000r 2               FRAG_KEYON_DIS		=	%00001000
000000r 2               FRAG_KEYON_DIS_CLR	=	%11110111
000000r 2               FRAG_SIL			=	%00010000
000000r 2               FRAG_SIL_CLR		=	%11101111
000000r 2               FRAG_WRITE_DIS		=	%00100000
000000r 2               FRAG_WRITE_DIS_CLR	=	%11011111
000000r 2               FRAG_END			=	%10000000
000000r 2               FRAG_END_CLR		=	%01111111
000000r 2               
000000r 2               FRAG_VENV			=	%00000001
000000r 2               FRAG_VENV_CLR		=	%11111110
000000r 2               FRAG_FENV			=	%00000010
000000r 2               FRAG_FENV_CLR		=	%11111101
000000r 2               FRAG_NENV			=	%00000100
000000r 2               FRAG_NENV_CLR		=	%11111011
000000r 2               FRAG_TENV			=	%00001000
000000r 2               FRAG_TENV_CLR		=	%11110111
000000r 2               FRAG_SSWP			=	%00010000
000000r 2               FRAG_SSWP_CLR		=	%11101111
000000r 2               FRAG_ENV_DIS		=	%10000000
000000r 2               FRAG_ENV_DIS_CLR	=	%01111111
000000r 2               
000000r 2               
000000r 2               ;---------------------------------------
000000r 2               ;	システムプログラム中の定数を定義します。
000000r 2               ;---------------------------------------
000000r 2               
000000r 2               .scope	sysdef
000000r 2               
000000r 2               ;PPU
000000r 2               PPU_Ctrl1_set		= PPU_CTRL1_VBLANK | PPU_CTRL1_SPTBL
000000r 2               PPU_Ctrl2_set		= PPU_CTRL2_SPDISP | PPU_CTRL2_BGDISP | PPU_CTRL2_SPCLIP | PPU_CTRL2_BGCLIP
000000r 2               
000000r 2               .endscope
000000r 2               
000000r 2               
000000r 2               
000000r 2               
000000r 2               ;---------------------------------------
000000r 2               ;	ＩＯ
000000r 2               ;---------------------------------------
000000r 2               ; $2000 PPU Control Register 0
000000r 2               PPU_CTRL1_VBLANK	= $80
000000r 2               PPU_CTRL1_SLAVE		= $40
000000r 2               PPU_CTRL1_SP16		= $20
000000r 2               PPU_CTRL1_BGTBL		= $10
000000r 2               PPU_CTRL1_SPTBL		= $08
000000r 2               PPU_CTRL1_INC32		= $04
000000r 2               PPU_CTRL1_NAMETBL	= $03
000000r 2               
000000r 2               ; $2001 PPU Control Register 1
000000r 2               PPU_CTRL2_BGCOLOR	= $E0
000000r 2               PPU_CTRL2_SPDISP	= $10
000000r 2               PPU_CTRL2_BGDISP	= $08
000000r 2               PPU_CTRL2_SPCLIP	= $04
000000r 2               PPU_CTRL2_BGCLIP	= $02
000000r 2               PPU_CTRL2_COLORMODE	= $01
000000r 2               
000000r 1               
000000r 1               ;=======================================================================
000000r 1               ;	Zeropage works
000000r 1               ;-----------------------------------------------------------------------
000000r 1               .zeropage
000000r 1               
000000r 1  xx xx xx xx  Work:		.res	4
000004r 1               
000004r 1               ;=======================================================================
000004r 1               ;	Non Zeropage works
000004r 1               ;-----------------------------------------------------------------------
000004r 1               .bss
000000r 1               
000000r 1  xx xx xx xx  Device:			.res	MAX_TRACK	;トラックで使用している音源
000004r 1  xx xx xx xx  
000008r 1  xx xx xx xx  
00000Cr 1  xx xx xx xx  
000010r 1  xx xx xx xx  Frags:			.res	MAX_TRACK	;通常のフラグ
000014r 1  xx xx xx xx  
000018r 1  xx xx xx xx  
00001Cr 1  xx xx xx xx  
000020r 1  xx xx xx xx  EnvFrags:		.res	MAX_TRACK	;エンベロープのフラグ
000024r 1  xx xx xx xx  
000028r 1  xx xx xx xx  
00002Cr 1  xx xx xx xx  
000030r 1  xx xx xx xx  Ptr_L:			.res	MAX_TRACK	;再生箇所のアドレスL
000034r 1  xx xx xx xx  
000038r 1  xx xx xx xx  
00003Cr 1  xx xx xx xx  
000040r 1  xx xx xx xx  Ptr_H:			.res	MAX_TRACK	;再生箇所のアドレスH
000044r 1  xx xx xx xx  
000048r 1  xx xx xx xx  
00004Cr 1  xx xx xx xx  
000050r 1  xx xx xx xx  LenCtr:			.res	MAX_TRACK	;音長カウンタ
000054r 1  xx xx xx xx  
000058r 1  xx xx xx xx  
00005Cr 1  xx xx xx xx  
000060r 1  xx xx xx xx  Octave:			.res	MAX_TRACK	;オクターブ
000064r 1  xx xx xx xx  
000068r 1  xx xx xx xx  
00006Cr 1  xx xx xx xx  
000070r 1  xx xx xx xx  NoteN:			.res	MAX_TRACK	;ノートナンバー
000074r 1  xx xx xx xx  
000078r 1  xx xx xx xx  
00007Cr 1  xx xx xx xx  
000080r 1  xx xx xx xx  DefLen:			.res	MAX_TRACK	;デフォルト音長
000084r 1  xx xx xx xx  
000088r 1  xx xx xx xx  
00008Cr 1  xx xx xx xx  
000090r 1  xx xx xx xx  Length:			.res	MAX_TRACK	;音長
000094r 1  xx xx xx xx  
000098r 1  xx xx xx xx  
00009Cr 1  xx xx xx xx  
0000A0r 1  xx xx xx xx  GateCtr:		.res	MAX_TRACK	;ゲートカウンター
0000A4r 1  xx xx xx xx  
0000A8r 1  xx xx xx xx  
0000ACr 1  xx xx xx xx  
0000B0r 1  xx xx xx xx  GateQ:			.res	MAX_TRACK	;qコマンドの値
0000B4r 1  xx xx xx xx  
0000B8r 1  xx xx xx xx  
0000BCr 1  xx xx xx xx  
0000C0r 1  xx xx xx xx  GateU:			.res	MAX_TRACK	;uコマンドの値
0000C4r 1  xx xx xx xx  
0000C8r 1  xx xx xx xx  
0000CCr 1  xx xx xx xx  
0000D0r 1  xx xx xx xx  GateBQ:			.res	MAX_TRACK	;Qコマンドの値
0000D4r 1  xx xx xx xx  
0000D8r 1  xx xx xx xx  
0000DCr 1  xx xx xx xx  
0000E0r 1  xx xx xx xx  TrVolume:		.res	MAX_TRACK	;トラック音量
0000E4r 1  xx xx xx xx  
0000E8r 1  xx xx xx xx  
0000ECr 1  xx xx xx xx  
0000F0r 1  xx xx xx xx  Volume:			.res	MAX_TRACK	;音量
0000F4r 1  xx xx xx xx  
0000F8r 1  xx xx xx xx  
0000FCr 1  xx xx xx xx  
000100r 1  xx xx xx xx  Tone:			.res	MAX_TRACK	;音色
000104r 1  xx xx xx xx  
000108r 1  xx xx xx xx  
00010Cr 1  xx xx xx xx  
000110r 1  xx xx xx xx  Freq_L:			.res	MAX_TRACK	;周波数L
000114r 1  xx xx xx xx  
000118r 1  xx xx xx xx  
00011Cr 1  xx xx xx xx  
000120r 1  xx xx xx xx  Freq_H:			.res	MAX_TRACK	;周波数H
000124r 1  xx xx xx xx  
000128r 1  xx xx xx xx  
00012Cr 1  xx xx xx xx  
000130r 1  xx xx xx xx  RefFreq_L:		.res	MAX_TRACK	;音程エンベロープ値を加算する前の周波数L
000134r 1  xx xx xx xx  
000138r 1  xx xx xx xx  
00013Cr 1  xx xx xx xx  
000140r 1  xx xx xx xx  RefFreq_H:		.res	MAX_TRACK	;音程エンベロープ値を加算する前の周波数H
000144r 1  xx xx xx xx  
000148r 1  xx xx xx xx  
00014Cr 1  xx xx xx xx  
000150r 1  xx xx xx xx  RefNoteN:		.res	MAX_TRACK	;ノートエンベロープ値を加算する前のノートナンバー
000154r 1  xx xx xx xx  
000158r 1  xx xx xx xx  
00015Cr 1  xx xx xx xx  
000160r 1  xx xx xx xx  RefTone:		.res	MAX_TRACK	;音色エンベロープ値を加算する前の音色
000164r 1  xx xx xx xx  
000168r 1  xx xx xx xx  
00016Cr 1  xx xx xx xx  
000170r 1  xx xx xx xx  PrevFreq_L:		.res	MAX_TRACK	;前回レジスタに書き込んだ周波数L（音源ごとに保存）
000174r 1  xx xx xx xx  
000178r 1  xx xx xx xx  
00017Cr 1  xx xx xx xx  
000180r 1  xx xx xx xx  PrevFreq_H:		.res	MAX_TRACK	;前回レジスタに書き込んだ周波数H（音源ごとに保存）
000184r 1  xx xx xx xx  
000188r 1  xx xx xx xx  
00018Cr 1  xx xx xx xx  
000190r 1  xx xx xx xx  KeyShift:		.res	MAX_TRACK	;キーシフト値
000194r 1  xx xx xx xx  
000198r 1  xx xx xx xx  
00019Cr 1  xx xx xx xx  
0001A0r 1  xx xx xx xx  Detune:			.res	MAX_TRACK	;デチューン値
0001A4r 1  xx xx xx xx  
0001A8r 1  xx xx xx xx  
0001ACr 1  xx xx xx xx  
0001B0r 1  xx xx xx xx  InfLoopAddr_L:	.res	MAX_TRACK	;無限ループの戻り先L
0001B4r 1  xx xx xx xx  
0001B8r 1  xx xx xx xx  
0001BCr 1  xx xx xx xx  
0001C0r 1  xx xx xx xx  InfLoopAddr_H:	.res	MAX_TRACK	;無限ループの戻り先H
0001C4r 1  xx xx xx xx  
0001C8r 1  xx xx xx xx  
0001CCr 1  xx xx xx xx  
0001D0r 1  xx xx xx xx  SSwpEnd:		.res	MAX_TRACK	;ソフトウェアスイープの終了音程（+-半音単位）
0001D4r 1  xx xx xx xx  
0001D8r 1  xx xx xx xx  
0001DCr 1  xx xx xx xx  
0001E0r 1  xx xx xx xx  SSwpDelay:		.res	MAX_TRACK	;ソフトウェアスイープのディレイ
0001E4r 1  xx xx xx xx  
0001E8r 1  xx xx xx xx  
0001ECr 1  xx xx xx xx  
0001F0r 1  xx xx xx xx  SSwpDepth:		.res	MAX_TRACK	;ソフトウェアスイープの一回に加算する値
0001F4r 1  xx xx xx xx  
0001F8r 1  xx xx xx xx  
0001FCr 1  xx xx xx xx  
000200r 1  xx xx xx xx  SSwpRate:		.res	MAX_TRACK	;ソフトウェアスイープで何フレームおきに加算するか
000204r 1  xx xx xx xx  
000208r 1  xx xx xx xx  
00020Cr 1  xx xx xx xx  
000210r 1  xx xx xx xx  SSwpEndFreq_L:	.res	MAX_TRACK	;ソフトウェアスイープの終了周波数L
000214r 1  xx xx xx xx  
000218r 1  xx xx xx xx  
00021Cr 1  xx xx xx xx  
000220r 1  xx xx xx xx  SSwpEndFreq_H:	.res	MAX_TRACK	;ソフトウェアスイープの終了周波数H
000224r 1  xx xx xx xx  
000228r 1  xx xx xx xx  
00022Cr 1  xx xx xx xx  
000230r 1  xx xx xx xx  SSwpCtr:		.res	MAX_TRACK	;ソフトウェアスイープのカウンタ
000234r 1  xx xx xx xx  
000238r 1  xx xx xx xx  
00023Cr 1  xx xx xx xx  
000240r 1  xx xx xx xx  VEnvAddr_L:		.res	MAX_TRACK	;音量エンベロープのアドレスL
000244r 1  xx xx xx xx  
000248r 1  xx xx xx xx  
00024Cr 1  xx xx xx xx  
000250r 1  xx xx xx xx  VEnvAddr_H:		.res	MAX_TRACK	;音量エンベロープのアドレスH
000254r 1  xx xx xx xx  
000258r 1  xx xx xx xx  
00025Cr 1  xx xx xx xx  
000260r 1  xx xx xx xx  VEnvPos:		.res	MAX_TRACK	;音量エンベロープの現在位置
000264r 1  xx xx xx xx  
000268r 1  xx xx xx xx  
00026Cr 1  xx xx xx xx  
000270r 1  xx xx xx xx  VEnvCtr:		.res	MAX_TRACK	;音量エンベロープのカウンタ
000274r 1  xx xx xx xx  
000278r 1  xx xx xx xx  
00027Cr 1  xx xx xx xx  
000280r 1  xx xx xx xx  VEnvDelay:		.res	MAX_TRACK	;音量エンベロープのディレイ
000284r 1  xx xx xx xx  
000288r 1  xx xx xx xx  
00028Cr 1  xx xx xx xx  
000290r 1  xx xx xx xx  FEnvAddr_L:		.res	MAX_TRACK	;音程エンベロープ以下省略
000294r 1  xx xx xx xx  
000298r 1  xx xx xx xx  
00029Cr 1  xx xx xx xx  
0002A0r 1  xx xx xx xx  FEnvAddr_H:		.res	MAX_TRACK
0002A4r 1  xx xx xx xx  
0002A8r 1  xx xx xx xx  
0002ACr 1  xx xx xx xx  
0002B0r 1  xx xx xx xx  FEnvPos:		.res	MAX_TRACK
0002B4r 1  xx xx xx xx  
0002B8r 1  xx xx xx xx  
0002BCr 1  xx xx xx xx  
0002C0r 1  xx xx xx xx  FEnvCtr:		.res	MAX_TRACK
0002C4r 1  xx xx xx xx  
0002C8r 1  xx xx xx xx  
0002CCr 1  xx xx xx xx  
0002D0r 1  xx xx xx xx  FEnvDelay:		.res	MAX_TRACK
0002D4r 1  xx xx xx xx  
0002D8r 1  xx xx xx xx  
0002DCr 1  xx xx xx xx  
0002E0r 1  xx xx xx xx  NEnvAddr_L:		.res	MAX_TRACK	;ノートエンベロープ
0002E4r 1  xx xx xx xx  
0002E8r 1  xx xx xx xx  
0002ECr 1  xx xx xx xx  
0002F0r 1  xx xx xx xx  NEnvAddr_H:		.res	MAX_TRACK
0002F4r 1  xx xx xx xx  
0002F8r 1  xx xx xx xx  
0002FCr 1  xx xx xx xx  
000300r 1  xx xx xx xx  NEnvPos:		.res	MAX_TRACK
000304r 1  xx xx xx xx  
000308r 1  xx xx xx xx  
00030Cr 1  xx xx xx xx  
000310r 1  xx xx xx xx  NEnvCtr:		.res	MAX_TRACK
000314r 1  xx xx xx xx  
000318r 1  xx xx xx xx  
00031Cr 1  xx xx xx xx  
000320r 1  xx xx xx xx  NEnvDelay:		.res	MAX_TRACK
000324r 1  xx xx xx xx  
000328r 1  xx xx xx xx  
00032Cr 1  xx xx xx xx  
000330r 1  xx xx xx xx  TEnvAddr_L:		.res	MAX_TRACK	;音色エンベロープ
000334r 1  xx xx xx xx  
000338r 1  xx xx xx xx  
00033Cr 1  xx xx xx xx  
000340r 1  xx xx xx xx  TEnvAddr_H:		.res	MAX_TRACK
000344r 1  xx xx xx xx  
000348r 1  xx xx xx xx  
00034Cr 1  xx xx xx xx  
000350r 1  xx xx xx xx  TEnvPos:		.res	MAX_TRACK
000354r 1  xx xx xx xx  
000358r 1  xx xx xx xx  
00035Cr 1  xx xx xx xx  
000360r 1  xx xx xx xx  TEnvCtr:		.res	MAX_TRACK
000364r 1  xx xx xx xx  
000368r 1  xx xx xx xx  
00036Cr 1  xx xx xx xx  
000370r 1  xx xx xx xx  TEnvDelay:		.res	MAX_TRACK
000374r 1  xx xx xx xx  
000378r 1  xx xx xx xx  
00037Cr 1  xx xx xx xx  
000380r 1  xx xx xx xx  HSwpReg:		.res	MAX_TRACK	;ハードウェアスイープレジスタに書き込む値
000384r 1  xx xx xx xx  
000388r 1  xx xx xx xx  
00038Cr 1  xx xx xx xx  
000390r 1  xx xx xx xx  HEnvReg:		.res	MAX_TRACK	;ハードウェアエンベロープレジスタに書き込む値
000394r 1  xx xx xx xx  
000398r 1  xx xx xx xx  
00039Cr 1  xx xx xx xx  
0003A0r 1  xx xx xx xx  LoopDepth:		.res	MAX_TRACK	;ループ深度
0003A4r 1  xx xx xx xx  
0003A8r 1  xx xx xx xx  
0003ACr 1  xx xx xx xx  
0003B0r 1               
0003B0r 1  00           __cc:		.byte	0		;= $14	; 1/60単位 (HEX)
0003B1r 1  00           __ss:		.byte	0		;= $15	; 秒【BCD】
0003B2r 1  00           __mm:		.byte	0		;= $16	; 分【BCD】
0003B3r 1  00           __hh:		.byte	0		;= $17	; 時 (HEX)
0003B4r 1               
0003B4r 1  xx           IsProc:			.res	1	;処理中フラグ。0で処理中
0003B5r 1  xx           SkipCtr:		.res	1	;スキップカウンタ
0003B6r 1  xx           SkipFreq:		.res	1	;スキップカウンタに加算する値
0003B7r 1  xx           ProcTr:			.res	1	;処理中のトラック
0003B8r 1  xx           SeqAddr_L:		.res	1	;シーケンス情報のアドレスL
0003B9r 1  xx           SeqAddr_H:		.res	1	;シーケンス情報のアドレスH
0003BAr 1  xx           DpcmAddr_L:		.res	1	;DPCMのデータがあるアドレスL
0003BBr 1  xx           DpcmAddr_H:		.res	1	;DPCMのデータがあるアドレスH
0003BCr 1  xx           DpcmOffset:		.res	1	;DPCMのデータまでのオフセット
0003BDr 1  xx           DpcmLength:		.res	1	;DPCMのデータ長
0003BEr 1  xx           Rem16N:			.res	1	;ノートナンバーの16の剰余（ノイズとDPCM用）
0003BFr 1               
0003BFr 1  xx xx xx xx  LoopN:		.res	MAX_TRACK * MAX_LOOP	;残りループ回数
0003C3r 1  xx xx xx xx  
0003C7r 1  xx xx xx xx  
0003CBr 1  xx xx xx xx  
0003CFr 1  xx xx xx xx  
0003D3r 1  xx xx xx xx  
0003D7r 1  xx xx xx xx  
0003DBr 1  xx xx xx xx  
0003DFr 1  xx xx xx xx  
0003E3r 1  xx xx xx xx  
0003E7r 1  xx xx xx xx  
0003EBr 1  xx xx xx xx  
0003EFr 1  xx xx xx xx  LoopAddr_L:	.res	MAX_TRACK * MAX_LOOP	;ループの戻り先L
0003F3r 1  xx xx xx xx  
0003F7r 1  xx xx xx xx  
0003FBr 1  xx xx xx xx  
0003FFr 1  xx xx xx xx  
000403r 1  xx xx xx xx  
000407r 1  xx xx xx xx  
00040Br 1  xx xx xx xx  
00040Fr 1  xx xx xx xx  
000413r 1  xx xx xx xx  
000417r 1  xx xx xx xx  
00041Br 1  xx xx xx xx  
00041Fr 1  xx xx xx xx  LoopAddr_H:	.res	MAX_TRACK * MAX_LOOP	;ループの戻り先H
000423r 1  xx xx xx xx  
000427r 1  xx xx xx xx  
00042Br 1  xx xx xx xx  
00042Fr 1  xx xx xx xx  
000433r 1  xx xx xx xx  
000437r 1  xx xx xx xx  
00043Br 1  xx xx xx xx  
00043Fr 1  xx xx xx xx  
000443r 1  xx xx xx xx  
000447r 1  xx xx xx xx  
00044Br 1  xx xx xx xx  
00044Fr 1               
00044Fr 1               
00044Fr 1               ;00～6b	:o0c～o8b	音長デフォ
00044Fr 1               ;6c	:r		休符（音長デフォ）
00044Fr 1               ;6d	:[x		ループ開始
00044Fr 1               ;6e	:]		ループ終了
00044Fr 1               ;6f	::		ループ途中終了
00044Fr 1               ;70	:qx		ゲートタイム（音長-nの方式。他と排他）
00044Fr 1               ;71	:ux		ゲートタイム（音長nの方式。他と排他）
00044Fr 1               ;72	:Qx		ゲートタイム（音長n/8の方式。他と排他）
00044Fr 1               ;73	:kx		キーシフト相対指定
00044Fr 1               ;74	:Kx		キーシフト絶対指定
00044Fr 1               ;75	:&		次の音がタイ・スラーになる
00044Fr 1               ;76	:@x		音色指定
00044Fr 1               ;77	:tx		フレームスキップ値。コンパイラでテンポから計算
00044Fr 1               ;78 :@p		指定した曲番号のデータを再生
00044Fr 1               ;79	:@vx	音量エンベロープ指定（外部定義）
00044Fr 1               ;7a :@v*	音量エンベロープ停止
00044Fr 1               ;7b	:@fx	音程エンベロープ指定（外部定義）
00044Fr 1               ;7c :@f*	音程エンベロープ停止
00044Fr 1               ;7d	:@nx	ノートエンベロープ指定（外部定義）
00044Fr 1               ;7e :@n*	ノートエンベロープ停止
00044Fr 1               ;7f	:		トラック終了
00044Fr 1               ;80～eb	:o0c～o8b	音長指定
00044Fr 1               ;ec	:r		休符（音長指定）
00044Fr 1               ;ed :L		無限ループ
00044Fr 1               ;ee	:lx		デフォ音長
00044Fr 1               ;ef	:vx		ボリューム絶対指定（0～15）
00044Fr 1               ;f0	:v+-x	ボリューム相対指定（-15～15）
00044Fr 1               ;f1	:@tx	音色エンベロープ指定（外部定義）
00044Fr 1               ;f2	:@t*	音色エンベロープ停止
00044Fr 1               ;f3	:@dx	デチューン
00044Fr 1               ;f4	:hsx		ハードウェアスイープ
00044Fr 1               ;f5	:hex		ハードウェアエンベロープ
00044Fr 1               ;f6	:sx		ソフトウェアスイープ
00044Fr 1               ;f7	:s*		ソフトウェアスイープ無効
00044Fr 1               ;f8	:r-		エンベロープ無効
00044Fr 1               ;f9	:w		メモリ書き込み
00044Fr 1               ;fa	:\x	サブルーチン
00044Fr 1               
00044Fr 1               
00044Fr 1               ; ------------------------------------------------------------------------
00044Fr 1               ; main
00044Fr 1               ; ------------------------------------------------------------------------
00044Fr 1               .code
000000r 1               
000000r 1               .proc drv_main
000000r 1  AD rr rr     		lda IsProc
000003r 1  D0 01        		bne start
000005r 1  60           		rts
000006r 1               	start:
000006r 1  A9 00        		lda #0
000008r 1  8D rr rr     		sta IsProc
00000Br 1  AD rr rr     		lda SkipCtr
00000Er 1  18           		clc
00000Fr 1  6D rr rr     		adc SkipFreq
000012r 1  8D rr rr     		sta SkipCtr
000015r 1  B0 05        		bcs skip		;SkipFreqを足していって桁上がりしたらスキップ
000017r 1  A2 0F        		ldx #LAST_TRACK
000019r 1  20 rr rr     		jsr track		;トラック処理
00001Cr 1               	skip:
00001Cr 1  A2 0F        		ldx #LAST_TRACK
00001Er 1  20 rr rr     		jsr envelope	;エンベロープと書き込み処理は毎フレームやる
000021r 1               	iend:
000021r 1  A9 01        		lda #1
000023r 1  8D rr rr     		sta IsProc
000026r 1  60           		rts
000027r 1               .endproc
000027r 1               
000027r 1               
000027r 1               .proc drv_init
000027r 1               		;変数初期化
000027r 1  A9 3F        		lda #%00111111
000029r 1  8D 00 40     		sta $4000
00002Cr 1  8D 04 40     		sta $4004
00002Fr 1  A9 08        		lda #%00001000
000031r 1  8D 01 40     		sta $4001
000034r 1  8D 05 40     		sta $4005
000037r 1  A9 FF        		lda #%11111111
000039r 1  8D 08 40     		sta $4008
00003Cr 1  A9 0F        		lda #%00001111
00003Er 1  8D 15 40     		sta $4015
000041r 1               
000041r 1  A9 00        		lda #0
000043r 1  8D rr rr     		sta SkipCtr
000046r 1  8D rr rr     		sta ProcTr
000049r 1  A9 00        		lda #0
00004Br 1  8D rr rr     		sta SkipFreq
00004Er 1  8D rr rr     		sta SkipCtr
000051r 1               
000051r 1  A9 01        		lda #1
000053r 1  8D rr rr     		sta IsProc
000056r 1  60           		rts
000057r 1               .endproc
000057r 1               
000057r 1               
000057r 1               .proc track_init
000057r 1  A9 00        		lda #0
000059r 1  9D rr rr     		sta LenCtr, x
00005Cr 1  9D rr rr     		sta InfLoopAddr_L, x
00005Fr 1  9D rr rr     		sta InfLoopAddr_H, x
000062r 1  9D rr rr     		sta GateCtr, x
000065r 1  9D rr rr     		sta GateQ, x
000068r 1  9D rr rr     		sta GateU, x
00006Br 1  9D rr rr     		sta KeyShift, x
00006Er 1  9D rr rr     		sta Detune, x
000071r 1  9D rr rr     		sta VEnvCtr, x
000074r 1  9D rr rr     		sta VEnvPos, x
000077r 1  9D rr rr     		sta EnvFrags, x
00007Ar 1  9D rr rr     		sta Tone, x
00007Dr 1  9D rr rr     		sta RefTone, x
000080r 1  09 04        		ora #FRAG_LOAD
000082r 1  9D rr rr     		sta Frags, x
000085r 1  A9 18        		lda #24
000087r 1  9D rr rr     		sta DefLen, x
00008Ar 1  BD rr rr     		lda Device, x
00008Dr 1  C9 04        		cmp #4
00008Fr 1  D0 05        		bne @N
000091r 1  A9 00        		lda #0
000093r 1  4C rr rr     		jmp @E
000096r 1               	@N:
000096r 1  A9 0F        		lda #15
000098r 1               	@E:
000098r 1  9D rr rr     		sta Volume, x
00009Br 1  9D rr rr     		sta TrVolume, x
00009Er 1  A9 08        		lda #%00001000
0000A0r 1  9D rr rr     		sta HSwpReg, x
0000A3r 1  A9 30        		lda #%00110000
0000A5r 1  9D rr rr     		sta HEnvReg, x
0000A8r 1  60           		rts
0000A9r 1               .endproc
0000A9r 1               
0000A9r 1               
0000A9r 1               .proc drv_sndreq
0000A9r 1  85 rr        		sta Work
0000ABr 1  8D rr rr     		sta SeqAddr_L
0000AEr 1  86 rr        		stx Work + 1
0000B0r 1  8E rr rr     		stx SeqAddr_H
0000B3r 1  98           		tya
0000B4r 1  0A           		asl
0000B5r 1               	load:
0000B5r 1  A8           		tay
0000B6r 1  B1 rr        		lda (Work), y
0000B8r 1  18           		clc
0000B9r 1  65 rr        		adc Work
0000BBr 1  85 rr        		sta Work + 2
0000BDr 1  C8           		iny
0000BEr 1  B1 rr        		lda (Work), y
0000C0r 1  65 rr        		adc Work + 1
0000C2r 1  85 rr        		sta Work + 1
0000C4r 1  A5 rr        		lda Work + 2
0000C6r 1  85 rr        		sta Work
0000C8r 1  A2 00        		ldx #0			;ここからポインタ初期化
0000CAr 1  A0 00        		ldy #0
0000CCr 1               		;lda (Work), y
0000CCr 1               		;sta Work + 2	;最大トラック数
0000CCr 1               		;iny
0000CCr 1               	loop:
0000CCr 1               		;cpx Work + 2	;最大トラック番号以降は未使用トラック
0000CCr 1               		;bcs nouse
0000CCr 1  8A           		txa
0000CDr 1  D1 rr        		cmp (Work), y	;トラック番号を比較
0000CFr 1  D0 1F        		bne nouse		;一致しなかったら未使用トラック
0000D1r 1  C8           		iny
0000D2r 1  B1 rr        		lda (Work), y
0000D4r 1  9D rr rr     		sta Device, x	;音源番号を取得して保存
0000D7r 1  C8           		iny
0000D8r 1  B1 rr        		lda (Work), y
0000DAr 1  18           		clc
0000DBr 1  6D rr rr     		adc SeqAddr_L
0000DEr 1  9D rr rr     		sta Ptr_L, x	;トラックの開始アドレスを保存
0000E1r 1  C8           		iny
0000E2r 1  B1 rr        		lda (Work), y
0000E4r 1  6D rr rr     		adc SeqAddr_H
0000E7r 1  9D rr rr     		sta Ptr_H, x
0000EAr 1  20 rr rr     		jsr track_init	;トラック初期化
0000EDr 1  4C rr rr     		jmp next
0000F0r 1               	nouse:
0000F0r 1  BD rr rr     		lda Frags, x	;使っているトラックならスルー
0000F3r 1  29 07        		and #FRAG_KEYON | FRAG_KEYOFF | FRAG_LOAD
0000F5r 1  D0 05        		bne @N
0000F7r 1  A9 80        		lda #FRAG_END
0000F9r 1  9D rr rr     		sta Frags, x
0000FCr 1               	@N:
0000FCr 1  E8           		inx
0000FDr 1  E0 10        		cpx #MAX_TRACK
0000FFr 1  90 CB        		bcc loop
000101r 1  4C rr rr     		jmp def
000104r 1               	next:
000104r 1  E8           		inx
000105r 1  C8           		iny
000106r 1  E0 10        		cpx #MAX_TRACK
000108r 1  90 C2        		bcc loop
00010Ar 1               	def:
00010Ar 1  C8           		iny				;トラック終端を飛ばす
00010Br 1  A2 00        		ldx #0
00010Dr 1               	@L:
00010Dr 1  B1 rr        		lda (Work), y
00010Fr 1  9D rr rr     		sta DefLen, x	;デフォルト音長を保存
000112r 1  E8           		inx
000113r 1  E0 10        		cpx #MAX_TRACK
000115r 1  90 F6        		bcc @L
000117r 1               
000117r 1  60           		rts
000118r 1               .endproc
000118r 1               
000118r 1               
000118r 1               .proc set_dpcm
000118r 1  8D rr rr     		sta DpcmAddr_L
00011Br 1  8E rr rr     		stx DpcmAddr_H
00011Er 1  60           		rts
00011Fr 1               .endproc
00011Fr 1               
00011Fr 1               
00011Fr 1               ;音長テーブルの作成
00011Fr 1               ;.proc make_frame_tbl
00011Fr 1               ;音長からフレーム数を計算
00011Fr 1               ;		lda TimeBase
00011Fr 1               ;		ldx #1
00011Fr 1               ;		ldy #11
00011Fr 1               ;	start:
00011Fr 1               ;		sec
00011Fr 1               ;		sbc Length_Tbl, y
00011Fr 1               ;		cmp Length_Tbl, y
00011Fr 1               ;		bcc next
00011Fr 1               ;		inx
00011Fr 1               ;		jmp start
00011Fr 1               ;	next:
00011Fr 1               ;		txa
00011Fr 1               ;		sta Frame_Tbl, y
00011Fr 1               ;		lda TimeBase
00011Fr 1               ;		ldx #1
00011Fr 1               ;		dey
00011Fr 1               ;		bpl start
00011Fr 1               ;		rts
00011Fr 1               ;.endproc
00011Fr 1               
00011Fr 1               
00011Fr 1               ;トラック処理
00011Fr 1               .proc track
00011Fr 1               	start:
00011Fr 1  BD rr rr     		lda Frags, x
000122r 1  29 80        		and #FRAG_END
000124r 1  F0 04        		beq len			;終了フラグが立っていなければ処理へ
000126r 1  CA           		dex
000127r 1  10 F6        		bpl start		;xがマイナスになったら全トラック終了
000129r 1               	end1:
000129r 1  60           		rts
00012Ar 1               	len:
00012Ar 1  8E rr rr     		stx ProcTr
00012Dr 1  BD rr rr     		lda LenCtr, x
000130r 1  F0 19        		beq seq				;音長カウンタが0になったらシーケンスのロード
000132r 1               	gate:					;音長カウンタが0でなければゲート処理へ
000132r 1  BD rr rr     		lda GateCtr, x
000135r 1  D0 2C        		bne cnt				;ゲートカウンタが0でなければカウント処理へ
000137r 1  BD rr rr     		lda Frags, x
00013Ar 1  29 02        		and #FRAG_KEYOFF
00013Cr 1  D0 25        		bne cnt				;ゲートカウンタが0でキーオフされていなかったらキーオフ
00013Er 1  BD rr rr     		lda Frags, x		;キーオフされていたら終了
000141r 1  09 02        		ora #FRAG_KEYOFF
000143r 1  29 F6        		and #FRAG_KEYON_CLR	& FRAG_KEYON_DIS_CLR
000145r 1  9D rr rr     		sta Frags, x
000148r 1  4C rr rr     		jmp cnt				;キーオフしたら終了
00014Br 1               	seq:
00014Br 1  20 rr rr     		jsr loadseq
00014Er 1  BD rr rr     		lda Frags, x
000151r 1  29 04        		and #FRAG_LOAD		;ロードフラグが立っていれば続けてロード
000153r 1  D0 F6        		bne seq
000155r 1  BD rr rr     		lda Frags, x
000158r 1  29 80        		and #FRAG_END
00015Ar 1  F0 04        		beq note			;終了フラグが立っていなければ処理へ
00015Cr 1  CA           		dex
00015Dr 1  10 C0        		bpl start
00015Fr 1  60           		rts
000160r 1               	note:
000160r 1  20 rr rr     		jsr procnote
000163r 1               	cnt:
000163r 1  BD rr rr     		lda LenCtr, x
000166r 1  F0 0B        		beq end
000168r 1  DE rr rr     		dec LenCtr, x
00016Br 1  BD rr rr     		lda GateCtr, x
00016Er 1  F0 03        		beq end
000170r 1  DE rr rr     		dec GateCtr, x
000173r 1               	end:
000173r 1  CA           		dex
000174r 1  10 A9        		bpl start
000176r 1  60           		rts
000177r 1               .endproc
000177r 1               
000177r 1               
000177r 1               .proc envelope
000177r 1               	start:
000177r 1  BD rr rr     		lda Frags, x
00017Ar 1  29 80        		and #FRAG_END
00017Cr 1  F0 08        		beq env			;終了フラグが立っていなければ処理へ
00017Er 1  CA           		dex
00017Fr 1  10 F6        		bpl start		;xがマイナスになったら全トラック終了
000181r 1               	end1:
000181r 1  A2 0F        		ldx #LAST_TRACK
000183r 1  4C rr rr     		jmp interrupt		;割り込み処理に移行
000186r 1               	env:
000186r 1  8E rr rr     		stx ProcTr
000189r 1  BD rr rr     		lda EnvFrags, x
00018Cr 1  29 80        		and #FRAG_ENV_DIS	;エンベロープ無効フラグが立っていたら音量処理へ
00018Er 1  D0 3C        		bne vol
000190r 1               	@N0:
000190r 1  BD rr rr     		lda EnvFrags, x
000193r 1  29 01        		and #FRAG_VENV
000195r 1  F0 03        		beq @N1
000197r 1  20 rr rr     		jsr volenv
00019Ar 1               	@N1:
00019Ar 1  BD rr rr     		lda EnvFrags, x
00019Dr 1  29 04        		and #FRAG_NENV
00019Fr 1  F0 03        		beq @N2
0001A1r 1  20 rr rr     		jsr noteenv
0001A4r 1               	@N2:
0001A4r 1  BD rr rr     		lda EnvFrags, x
0001A7r 1  29 02        		and #FRAG_FENV
0001A9r 1  F0 03        		beq @N3
0001ABr 1  20 rr rr     		jsr freqenv
0001AEr 1               	@N3:
0001AEr 1  BD rr rr     		lda EnvFrags, x
0001B1r 1  29 08        		and #FRAG_TENV
0001B3r 1  F0 03        		beq @N4
0001B5r 1  20 rr rr     		jsr toneenv
0001B8r 1               	@N4:
0001B8r 1  BD rr rr     		lda EnvFrags, x
0001BBr 1  29 10        		and #FRAG_SSWP
0001BDr 1  F0 03        		beq @N5
0001BFr 1  20 rr rr     		jsr ssweep
0001C2r 1               	@N5:
0001C2r 1  BD rr rr     		lda EnvFrags, x
0001C5r 1  29 01        		and #FRAG_VENV
0001C7r 1  F0 03        		beq vol				;音量エンベロープ無効なら音量処理へ
0001C9r 1  4C rr rr     		jmp last			;そうでなければ次のトラックへ
0001CCr 1               	vol:
0001CCr 1  BD rr rr     		lda Frags, x
0001CFr 1  29 01        		and #FRAG_KEYON		;キーオンされていたら音量をトラック音量にする
0001D1r 1  D0 0F        		bne trv
0001D3r 1  BD rr rr     		lda Frags, x
0001D6r 1  29 02        		and #FRAG_KEYOFF	;キーオフされていたら無音に
0001D8r 1  F0 18        		beq last
0001DAr 1  A9 00        		lda #0
0001DCr 1  9D rr rr     		sta Volume, x
0001DFr 1  4C rr rr     		jmp sil
0001E2r 1               	trv:
0001E2r 1  BD rr rr     		lda TrVolume, x
0001E5r 1  9D rr rr     		sta Volume, x
0001E8r 1  D0 08        		bne last
0001EAr 1               	sil:
0001EAr 1  BD rr rr     		lda Frags, x		;音量が0なら無音フラグを立てる
0001EDr 1  09 10        		ora #FRAG_SIL
0001EFr 1  9D rr rr     		sta Frags, x
0001F2r 1               	last:
0001F2r 1  CA           		dex
0001F3r 1  30 03        		bmi end		;xがマイナスになったら全トラック終了
0001F5r 1  4C rr rr     		jmp envelope
0001F8r 1               	end:
0001F8r 1  A2 0F        		ldx #LAST_TRACK
0001FAr 1  4C rr rr     		jmp interrupt		;割り込み処理に移行
0001FDr 1               .endproc
0001FDr 1               
0001FDr 1               
0001FDr 1               ;割り込み処理
0001FDr 1               .proc interrupt
0001FDr 1               	start:
0001FDr 1  8E rr rr     		stx ProcTr
000200r 1  BD rr rr     		lda Frags, x
000203r 1  29 10        		and #FRAG_SIL		;現在のトラックが無音の場合、後のトラックの発音処理をする
000205r 1  D0 06        		bne exec
000207r 1  CA           		dex
000208r 1  30 29        		bmi end		;xがマイナスになったら全トラック終了
00020Ar 1  4C rr rr     		jmp start
00020Dr 1               	exec:
00020Dr 1  E0 0F        		cpx #LAST_TRACK
00020Fr 1  F0 1F        		beq iend2					;最終トラックなら何もしない
000211r 1  BD rr rr     		lda Device, x
000214r 1  E8           		inx
000215r 1  DD rr rr     		cmp Device, x				;後のトラックと音源が違う場合なにもしない
000218r 1  D0 13        		bne iend
00021Ar 1  BD rr rr     		lda Frags ,x
00021Dr 1  29 90        		and #FRAG_END | FRAG_SIL	;後のトラックが終了か無音の場合なにもしない
00021Fr 1  D0 0C        		bne iend
000221r 1  CA           		dex
000222r 1  BD rr rr     		lda Frags, x
000225r 1  09 20        		ora #FRAG_WRITE_DIS			;それ以外は現在のトラックをレジスタ書き込み無効にする
000227r 1  9D rr rr     		sta Frags, x
00022Ar 1  4C rr rr     		jmp iend2
00022Dr 1               	iend:
00022Dr 1  AE rr rr     		ldx ProcTr					;トラック番号を元に戻して復帰
000230r 1               	iend2:
000230r 1  CA           		dex
000231r 1  10 CA        		bpl start
000233r 1               	end:
000233r 1  A2 0F        		ldx #LAST_TRACK
000235r 1  4C rr rr     		jmp writereg				;全部終わったらレジスタ書き込みへ
000238r 1               .endproc
000238r 1               
000238r 1               
000238r 1               ;レジスタ書き込み
000238r 1               .proc writereg
000238r 1               	start:
000238r 1  BD rr rr     		lda Frags, x
00023Br 1  29 80        		and #FRAG_END
00023Dr 1  D0 0A        		bne next		;終了フラグが立っていたら次トラックへ
00023Fr 1  BD rr rr     		lda Frags, x
000242r 1  29 20        		and #FRAG_WRITE_DIS
000244r 1  F0 07        		beq exec		;レジスタ書き込み無効フラグが立っていたら終了処理へ
000246r 1  4C rr rr     		jmp writereg_end
000249r 1               	next:
000249r 1  CA           		dex
00024Ar 1  10 EC        		bpl start		;xがマイナスになったら全トラック終了
00024Cr 1               	end1:
00024Cr 1  60           		rts
00024Dr 1               	exec:
00024Dr 1  A0 00        		ldy #0
00024Fr 1  BD rr rr     		lda Device, x
000252r 1  C9 00        		cmp #0
000254r 1  F0 15        		beq sqr00
000256r 1  A0 04        		ldy #4
000258r 1  C9 01        		cmp #1
00025Ar 1  F0 0F        		beq sqr00
00025Cr 1  C9 02        		cmp #2
00025Er 1  F0 0E        		beq tri
000260r 1  C9 03        		cmp #3
000262r 1  F0 21        		beq noi
000264r 1  C9 04        		cmp #4
000266r 1  F0 39        		beq pcm
000268r 1  4C rr rr     		jmp writereg_end
00026Br 1               	sqr00:
00026Br 1  4C rr rr     		jmp writesqr
00026Er 1               	tri:
00026Er 1  BD rr rr     		lda Freq_L, x
000271r 1  8D 0A 40     		sta $400a
000274r 1  BD rr rr     		lda Freq_H, x
000277r 1  8D 0B 40     		sta $400b
00027Ar 1  A9 80        		lda #%10000000
00027Cr 1  1D rr rr     		ora Volume, x
00027Fr 1  8D 08 40     		sta $4008
000282r 1  4C rr rr     		jmp writereg_end
000285r 1               	noi:
000285r 1  BD rr rr     		lda Volume, x
000288r 1  09 30        		ora #%00110000
00028Ar 1  8D 0C 40     		sta $400c
00028Dr 1  BD rr rr     		lda Tone, x
000290r 1  18           		clc
000291r 1  6A           		ror a
000292r 1  6A           		ror a
000293r 1  BD rr rr     		lda NoteN, x
000296r 1  8D 0E 40     		sta $400e
000299r 1  A9 F8        		lda #%11111000
00029Br 1  8D 0F 40     		sta $400f
00029Er 1  4C rr rr     		jmp writereg_end
0002A1r 1               	pcm:
0002A1r 1  BD rr rr     		lda Frags, x
0002A4r 1  29 03        		and #FRAG_KEYON | FRAG_KEYOFF	;キーオンもキーオフもたっていなければ終了
0002A6r 1  F0 33        		beq end
0002A8r 1  BD rr rr     		lda Frags, x
0002ABr 1  29 02        		and #FRAG_KEYOFF	;キーオフが立っていたら再生終了
0002ADr 1  D0 27        		bne stop
0002AFr 1  BD rr rr     		lda NoteN, x
0002B2r 1  8D 10 40     		sta $4010
0002B5r 1  BD rr rr     		lda Volume, x
0002B8r 1  F0 03        		beq @N
0002BAr 1  8D 11 40     		sta $4011
0002BDr 1               	@N:
0002BDr 1  AD rr rr     		lda DpcmOffset
0002C0r 1  8D 12 40     		sta $4012
0002C3r 1  AD rr rr     		lda DpcmLength
0002C6r 1  8D 13 40     		sta $4013
0002C9r 1  A9 0F        		lda #%00001111
0002CBr 1  8D 15 40     		sta $4015
0002CEr 1  A9 1F        		lda #%00011111
0002D0r 1  8D 15 40     		sta $4015
0002D3r 1  4C rr rr     		jmp end
0002D6r 1               	stop:
0002D6r 1  A9 0F        		lda #%00001111
0002D8r 1  8D 15 40     		sta $4015
0002DBr 1               	end:
0002DBr 1  4C rr rr     		jmp writereg_end
0002DEr 1               .endproc
0002DEr 1               
0002DEr 1               
0002DEr 1               .proc writereg_end
0002DEr 1  BD rr rr     		lda Frags, x
0002E1r 1  09 04        		ora #FRAG_LOAD			;ロードフラグを立てる
0002E3r 1               		;キーオン・キーオフ・書き込み無効フラグを降ろす
0002E3r 1  29 DC        		and #FRAG_KEYON_CLR & FRAG_KEYOFF_CLR & FRAG_WRITE_DIS_CLR
0002E5r 1  9D rr rr     		sta Frags, x
0002E8r 1  BC rr rr     		ldy Device, x		;周波数の保存
0002EBr 1  BD rr rr     		lda Freq_L, x
0002EEr 1  99 rr rr     		sta PrevFreq_L, y
0002F1r 1  BD rr rr     		lda Freq_H, x
0002F4r 1  99 rr rr     		sta PrevFreq_H, y
0002F7r 1  CA           		dex
0002F8r 1  30 03        		bmi end
0002FAr 1  4C rr rr     		jmp writereg
0002FDr 1               	end:
0002FDr 1  60           		rts
0002FEr 1               .endproc
0002FEr 1               
0002FEr 1               
0002FEr 1               .proc writesqr
0002FEr 1  84 rr        		sty Work + 2		;一旦yを保存
000300r 1  BD rr rr     		lda Tone, x
000303r 1  18           		clc
000304r 1  6A           		ror a
000305r 1  6A           		ror a
000306r 1  6A           		ror a
000307r 1  85 rr        		sta Work
000309r 1  BD rr rr     		lda HEnvReg, x
00030Cr 1  29 10        		and #%00010000		;ハードウェアエンベロープが有効なら以下を実行
00030Er 1  D0 08        		bne softenv
000310r 1  A5 rr        		lda Work
000312r 1  1D rr rr     		ora HEnvReg, x
000315r 1  4C rr rr     		jmp r4000				;そうでなければ以下を実行
000318r 1               	softenv:
000318r 1  A5 rr        		lda Work
00031Ar 1  09 30        		ora #%00110000
00031Cr 1  1D rr rr     		ora Volume, x
00031Fr 1               	r4000:
00031Fr 1  99 00 40     		sta $4000, y
000322r 1  BD rr rr     		lda Volume, x		;音量が0ならこれ以降は処理しない
000325r 1  D0 03        		bne next
000327r 1  4C rr rr     		jmp writereg_end
00032Ar 1               	next:
00032Ar 1  BD rr rr     		lda Frags, x
00032Dr 1  29 01        		and #FRAG_KEYON		;キーオンなら
00032Fr 1  D0 1E        		bne r4003
000331r 1               	r4002:
000331r 1  BC rr rr     		ldy Device, x
000334r 1  BD rr rr     		lda Freq_L, x
000337r 1  D9 rr rr     		cmp PrevFreq_L, y
00033Ar 1  F0 25        		beq hws
00033Cr 1  A4 rr        		ldy Work + 2
00033Er 1  99 02 40     		sta $4002, y
000341r 1  BD rr rr     		lda Freq_H, x
000344r 1  BC rr rr     		ldy Device, x
000347r 1  D9 rr rr     		cmp PrevFreq_H, y
00034Ar 1  D0 03        		bne r4003
00034Cr 1  4C rr rr     		jmp hws
00034Fr 1               	r4003:
00034Fr 1  BD rr rr     		lda Freq_L, x
000352r 1  A4 rr        		ldy Work + 2
000354r 1  99 02 40     		sta $4002, y
000357r 1  A9 08        		lda #%00001000
000359r 1  1D rr rr     		ora Freq_H, x
00035Cr 1  A4 rr        		ldy Work + 2
00035Er 1  99 03 40     		sta $4003, y		;ここに書き込むと波形がリセットされるので注意
000361r 1               	hws:
000361r 1  A4 rr        		ldy Work + 2
000363r 1  BD rr rr     		lda HSwpReg, x
000366r 1  29 80        		and #%10000000		;ハードウェアスイープ
000368r 1  F0 09        		beq @N
00036Ar 1  BD rr rr     		lda HSwpReg, x
00036Dr 1  99 01 40     		sta $4001, y
000370r 1  4C rr rr     		jmp end
000373r 1               	@N:
000373r 1  A9 08        		lda #%00001000
000375r 1  99 01 40     		sta $4001, y
000378r 1               	end:
000378r 1  4C rr rr     		jmp writereg_end
00037Br 1               .endproc
00037Br 1               
00037Br 1               
00037Br 1               ;シーケンスデータのロード
00037Br 1               .proc loadseq
00037Br 1  BD rr rr     		lda Ptr_L, x
00037Er 1  85 rr        		sta Work
000380r 1  BD rr rr     		lda Ptr_H, x
000383r 1  85 rr        		sta Work + 1
000385r 1               	l00:
000385r 1  A0 00        		ldy #0
000387r 1  B1 rr        		lda (Work), y
000389r 1               
000389r 1  C9 6C        		cmp #$6c	;音長なしノート
00038Br 1  B0 2E        		bcs l6c
00038Dr 1  9D rr rr     		sta NoteN, x
000390r 1  BD rr rr     		lda Frags, x
000393r 1  29 08        		and #FRAG_KEYON_DIS
000395r 1  D0 08        		bne @N
000397r 1  BD rr rr     		lda Frags, x
00039Ar 1  09 01        		ora #FRAG_KEYON					;キーオンフラグを立てる
00039Cr 1  9D rr rr     		sta Frags, x
00039Fr 1               	@N:
00039Fr 1               		;キーオフ・キーオン無効・ロード・無音フラグを降ろす
00039Fr 1  BD rr rr     		lda Frags, x
0003A2r 1  29 E1        		and #FRAG_KEYOFF_CLR & FRAG_KEYON_DIS_CLR & FRAG_LOAD_CLR & FRAG_SIL_CLR
0003A4r 1  9D rr rr     		sta Frags, x
0003A7r 1  BD rr rr     		lda EnvFrags, x
0003AAr 1  29 7F        		and #FRAG_ENV_DIS_CLR	;エンベロープ無効フラグを降ろす
0003ACr 1  9D rr rr     		sta EnvFrags, x
0003AFr 1  BD rr rr     		lda DefLen, x
0003B2r 1  9D rr rr     		sta Length, x
0003B5r 1  A9 01        		lda #1
0003B7r 1  20 rr rr     		jsr addptr
0003BAr 1  60           		rts
0003BBr 1               	l6c:
0003BBr 1  C9 6C        		cmp #$6c	;休符
0003BDr 1  D0 16        		bne l6d
0003BFr 1  BD rr rr     		lda Frags, x
0003C2r 1  09 02        		ora #FRAG_KEYOFF						;キーオフフラグを立てる
0003C4r 1               		;キーオン・キーオン無効・ロードフラグを降ろす
0003C4r 1  29 F2        		and #FRAG_KEYON_CLR & FRAG_KEYON_DIS_CLR & FRAG_LOAD_CLR
0003C6r 1  9D rr rr     		sta Frags, x
0003C9r 1  BD rr rr     		lda DefLen, x
0003CCr 1  9D rr rr     		sta Length, x
0003CFr 1  A9 01        		lda #1
0003D1r 1  20 rr rr     		jsr addptr
0003D4r 1  60           		rts
0003D5r 1               	l6d:
0003D5r 1  C9 6D        		cmp #$6d	;ループ開始
0003D7r 1  D0 23        		bne l6e
0003D9r 1  FE rr rr     		inc LoopDepth, x
0003DCr 1  20 rr rr     		jsr loopoffset
0003DFr 1  84 rr        		sty Work + 2
0003E1r 1  A0 01        		ldy #1
0003E3r 1  B1 rr        		lda (Work), y
0003E5r 1  A4 rr        		ldy Work + 2
0003E7r 1  99 rr rr     		sta LoopN, y
0003EAr 1  A9 02        		lda #2
0003ECr 1  20 rr rr     		jsr addptr
0003EFr 1  BD rr rr     		lda Ptr_L, x
0003F2r 1  99 rr rr     		sta LoopAddr_L, y
0003F5r 1  BD rr rr     		lda Ptr_H, x
0003F8r 1  99 rr rr     		sta LoopAddr_H, y
0003FBr 1  60           		rts
0003FCr 1               	l6e:
0003FCr 1  C9 6E        		cmp #$6e	;ループ終了
0003FEr 1  D0 4A        		bne l6f
000400r 1  20 rr rr     		jsr loopoffset
000403r 1  B9 rr rr     		lda LoopN, y		;yだと直接decできない
000406r 1  38           		sec
000407r 1  E9 01        		sbc #1
000409r 1  99 rr rr     		sta LoopN, y
00040Cr 1  F0 11        		beq @E2
00040Er 1  C9 01        		cmp #1				;ループ回数が1になったらループ終了＋１を保存しておく
000410r 1  F0 16        		beq @E3
000412r 1  B9 rr rr     		lda LoopAddr_L, y
000415r 1  9D rr rr     		sta Ptr_L, x
000418r 1  B9 rr rr     		lda LoopAddr_H, y
00041Br 1  9D rr rr     		sta Ptr_H, x
00041Er 1  60           		rts
00041Fr 1               	@E2:
00041Fr 1  DE rr rr     		dec LoopDepth, x	;ループを抜けたら深度減算
000422r 1  A9 01        		lda #1
000424r 1  20 rr rr     		jsr addptr
000427r 1  60           		rts
000428r 1               	@E3:
000428r 1  A9 01        		lda #1
00042Ar 1  20 rr rr     		jsr addptr
00042Dr 1  BD rr rr     		lda Ptr_L, x
000430r 1  48           		pha
000431r 1  B9 rr rr     		lda LoopAddr_L, y
000434r 1  9D rr rr     		sta Ptr_L, x
000437r 1  68           		pla
000438r 1  99 rr rr     		sta LoopAddr_L, y
00043Br 1  BD rr rr     		lda Ptr_H, x
00043Er 1  48           		pha
00043Fr 1  B9 rr rr     		lda LoopAddr_H, y
000442r 1  9D rr rr     		sta Ptr_H, x
000445r 1  68           		pla
000446r 1  99 rr rr     		sta LoopAddr_H, y
000449r 1  60           		rts
00044Ar 1               	l6f:
00044Ar 1  C9 6F        		cmp #$6f	;ループ途中終了
00044Cr 1  D0 25        		bne l70
00044Er 1  20 rr rr     		jsr loopoffset
000451r 1  B9 rr rr     		lda LoopN, y
000454r 1  C9 01        		cmp #1
000456r 1  D0 15        		bne @E
000458r 1  A9 00        		lda #0
00045Ar 1  99 rr rr     		sta LoopN, y
00045Dr 1  B9 rr rr     		lda LoopAddr_L, y
000460r 1  9D rr rr     		sta Ptr_L, x
000463r 1  B9 rr rr     		lda LoopAddr_H, y
000466r 1  9D rr rr     		sta Ptr_H, x
000469r 1  DE rr rr     		dec LoopDepth, x	;ループを抜けたら深度減算
00046Cr 1  60           		rts
00046Dr 1               	@E:
00046Dr 1  A9 01        		lda #1
00046Fr 1  20 rr rr     		jsr addptr
000472r 1  60           		rts
000473r 1               	l70:
000473r 1  C9 70        		cmp #$70	;ゲート(q)
000475r 1  D0 15        		bne l71
000477r 1  A0 01        		ldy #1
000479r 1  B1 rr        		lda (Work), y
00047Br 1  9D rr rr     		sta GateQ, x
00047Er 1  A9 00        		lda #0
000480r 1  9D rr rr     		sta GateU, x
000483r 1  9D rr rr     		sta GateBQ, x
000486r 1  A9 02        		lda #2
000488r 1  20 rr rr     		jsr addptr
00048Br 1  60           		rts
00048Cr 1               	l71:
00048Cr 1  C9 71        		cmp #$71	;ゲート(u)
00048Er 1  D0 15        		bne l72
000490r 1  A0 01        		ldy #1
000492r 1  B1 rr        		lda (Work), y
000494r 1  9D rr rr     		sta GateU, x
000497r 1  A9 00        		lda #0
000499r 1  9D rr rr     		sta GateQ, x
00049Cr 1  9D rr rr     		sta GateBQ, x
00049Fr 1  A9 02        		lda #2
0004A1r 1  20 rr rr     		jsr addptr
0004A4r 1  60           		rts
0004A5r 1               	l72:
0004A5r 1  C9 72        		cmp #$72	;ゲート(Q)
0004A7r 1  D0 15        		bne l73
0004A9r 1  A0 01        		ldy #1
0004ABr 1  B1 rr        		lda (Work), y
0004ADr 1  9D rr rr     		sta GateBQ, x
0004B0r 1  A9 00        		lda #0
0004B2r 1  9D rr rr     		sta GateU, x
0004B5r 1  9D rr rr     		sta GateQ, x
0004B8r 1  A9 02        		lda #2
0004BAr 1  20 rr rr     		jsr addptr
0004BDr 1  60           		rts
0004BEr 1               	l73:
0004BEr 1  C9 73        		cmp #$73	;相対キーシフト(k)
0004C0r 1  D0 11        		bne l74
0004C2r 1  A0 01        		ldy #1
0004C4r 1  B1 rr        		lda (Work), y
0004C6r 1  18           		clc
0004C7r 1  7D rr rr     		adc KeyShift, x
0004CAr 1  9D rr rr     		sta KeyShift, x
0004CDr 1  A9 02        		lda #2
0004CFr 1  20 rr rr     		jsr addptr
0004D2r 1  60           		rts
0004D3r 1               	l74:
0004D3r 1  C9 74        		cmp #$74	;絶対キーシフト(K)
0004D5r 1  D0 0D        		bne l75
0004D7r 1  A0 01        		ldy #1
0004D9r 1  B1 rr        		lda (Work), y
0004DBr 1  9D rr rr     		sta KeyShift, x
0004DEr 1  A9 02        		lda #2
0004E0r 1  20 rr rr     		jsr addptr
0004E3r 1  60           		rts
0004E4r 1               	l75:
0004E4r 1  C9 75        		cmp #$75	;タイ・スラー
0004E6r 1  D0 0E        		bne l76
0004E8r 1  BD rr rr     		lda Frags, x
0004EBr 1  09 08        		ora #FRAG_KEYON_DIS				;キーオン無効フラグを立てる
0004EDr 1  9D rr rr     		sta Frags, x
0004F0r 1  A9 01        		lda #1
0004F2r 1  20 rr rr     		jsr addptr
0004F5r 1  60           		rts
0004F6r 1               	l76:
0004F6r 1  C9 76        		cmp #$76	;音色指定
0004F8r 1  D0 33        		bne l77
0004FAr 1  BD rr rr     		lda EnvFrags, x
0004FDr 1  29 F7        		and #FRAG_TENV_CLR	;音色エンベロープを解除
0004FFr 1  9D rr rr     		sta EnvFrags, x
000502r 1  BD rr rr     		lda Device, x
000505r 1  C9 04        		cmp #4			;DPCMトラックなら
000507r 1  F0 10        		beq @D
000509r 1  A0 01        		ldy #1
00050Br 1  B1 rr        		lda (Work), y
00050Dr 1  9D rr rr     		sta Tone, x
000510r 1  9D rr rr     		sta RefTone, x		;音色番号を保存（音色エンベロープ解除用）
000513r 1  A9 02        		lda #2
000515r 1  20 rr rr     		jsr addptr
000518r 1  60           		rts
000519r 1               	@D:
000519r 1  A0 01        		ldy #1
00051Br 1  B1 rr        		lda (Work), y
00051Dr 1  8D rr rr     		sta DpcmOffset
000520r 1  A0 02        		ldy #2
000522r 1  B1 rr        		lda (Work), y
000524r 1  8D rr rr     		sta DpcmLength
000527r 1  A9 03        		lda #3
000529r 1  20 rr rr     		jsr addptr
00052Cr 1  60           		rts
00052Dr 1               	l77:
00052Dr 1  C9 77        		cmp #$77	;フレームスキップ加算値（テンポ）
00052Fr 1  D0 0D        		bne l78
000531r 1  A0 01        		ldy #1
000533r 1  B1 rr        		lda (Work), y
000535r 1  8D rr rr     		sta SkipFreq
000538r 1  A9 02        		lda #2
00053Ar 1  20 rr rr     		jsr addptr
00053Dr 1  60           		rts
00053Er 1               	l78:
00053Er 1  C9 78        		cmp #$78	;指定した曲番号のデータを再生
000540r 1  D0 17        		bne l79
000542r 1  A0 01        		ldy #1
000544r 1  B1 rr        		lda (Work), y
000546r 1  A8           		tay
000547r 1  AD rr rr     		lda SeqAddr_L
00054Ar 1  AE rr rr     		ldx SeqAddr_H
00054Dr 1  20 rr rr     		jsr drv_sndreq
000550r 1  AE rr rr     		ldx ProcTr
000553r 1  A9 02        		lda #2
000555r 1  20 rr rr     		jsr addptr
000558r 1  60           		rts
000559r 1               	l79:
000559r 1  C9 79        		cmp #$79			;音量エンベロープ。引数はアドレスL、アドレスH、ディレイ
00055Br 1  D0 40        		bne l7a
00055Dr 1  BD rr rr     		lda EnvFrags, x
000560r 1  09 01        		ora #FRAG_VENV		;フラグを立てる
000562r 1  9D rr rr     		sta EnvFrags, x
000565r 1  A0 01        		ldy #1
000567r 1  B1 rr        		lda (Work), y
000569r 1  9D rr rr     		sta VEnvAddr_L, x
00056Cr 1  A0 02        		ldy #2
00056Er 1  B1 rr        		lda (Work), y
000570r 1  9D rr rr     		sta VEnvAddr_H, x
000573r 1  A0 03        		ldy #3
000575r 1  B1 rr        		lda (Work), y
000577r 1  9D rr rr     		sta VEnvDelay, x
00057Ar 1  A9 01        		lda #1
00057Cr 1  9D rr rr     		sta VEnvCtr, x
00057Fr 1  A9 01        		lda #1
000581r 1  9D rr rr     		sta VEnvPos, x
000584r 1  18           		clc
000585r 1  BD rr rr     		lda VEnvAddr_L, x	;相対アドレスを絶対アドレスに直す
000588r 1  6D rr rr     		adc SeqAddr_L
00058Br 1  9D rr rr     		sta VEnvAddr_L, x
00058Er 1  BD rr rr     		lda VEnvAddr_H, x
000591r 1  6D rr rr     		adc SeqAddr_H
000594r 1  9D rr rr     		sta VEnvAddr_H, x
000597r 1  A9 04        		lda #4
000599r 1  20 rr rr     		jsr addptr
00059Cr 1  60           		rts
00059Dr 1               	l7a:
00059Dr 1  C9 7A        		cmp #$7a			;音量エンベロープのクリア
00059Fr 1  D0 14        		bne l7b
0005A1r 1  BD rr rr     		lda EnvFrags, x
0005A4r 1  29 FE        		and #FRAG_VENV_CLR	;フラグを降ろす
0005A6r 1  9D rr rr     		sta EnvFrags, x
0005A9r 1  BD rr rr     		lda TrVolume, x
0005ACr 1  9D rr rr     		sta Volume, x		;音量を戻す
0005AFr 1  A9 01        		lda #1
0005B1r 1  20 rr rr     		jsr addptr
0005B4r 1  60           		rts
0005B5r 1               	l7b:
0005B5r 1  C9 7B        		cmp #$7b			;音程エンベロープ。引数はアドレスL、アドレスH、ディレイ
0005B7r 1  D0 40        		bne l7c
0005B9r 1  BD rr rr     		lda EnvFrags, x
0005BCr 1  09 02        		ora #FRAG_FENV		;フラグを立てる
0005BEr 1  9D rr rr     		sta EnvFrags, x
0005C1r 1  A0 01        		ldy #1
0005C3r 1  B1 rr        		lda (Work), y
0005C5r 1  9D rr rr     		sta FEnvAddr_L, x
0005C8r 1  A0 02        		ldy #2
0005CAr 1  B1 rr        		lda (Work), y
0005CCr 1  9D rr rr     		sta FEnvAddr_H, x
0005CFr 1  A0 03        		ldy #3
0005D1r 1  B1 rr        		lda (Work), y
0005D3r 1  9D rr rr     		sta FEnvDelay, x
0005D6r 1  A9 01        		lda #1
0005D8r 1  9D rr rr     		sta FEnvCtr, x
0005DBr 1  A9 01        		lda #1
0005DDr 1  9D rr rr     		sta FEnvPos, x
0005E0r 1  18           		clc
0005E1r 1  BD rr rr     		lda FEnvAddr_L, x	;相対アドレスを絶対アドレスに直す
0005E4r 1  6D rr rr     		adc SeqAddr_L
0005E7r 1  9D rr rr     		sta FEnvAddr_L, x
0005EAr 1  BD rr rr     		lda FEnvAddr_H, x
0005EDr 1  6D rr rr     		adc SeqAddr_H
0005F0r 1  9D rr rr     		sta FEnvAddr_H, x
0005F3r 1  A9 04        		lda #4
0005F5r 1  20 rr rr     		jsr addptr
0005F8r 1  60           		rts
0005F9r 1               	l7c:
0005F9r 1  C9 7C        		cmp #$7c			;音程エンベロープのクリア
0005FBr 1  D0 0E        		bne l7d
0005FDr 1  BD rr rr     		lda EnvFrags, x
000600r 1  29 FD        		and #FRAG_FENV_CLR	;フラグを降ろす
000602r 1  9D rr rr     		sta EnvFrags, x
000605r 1  A9 01        		lda #1
000607r 1  20 rr rr     		jsr addptr
00060Ar 1  60           		rts
00060Br 1               	l7d:
00060Br 1  C9 7D        		cmp #$7d			;ノートエンベロープ。引数はアドレスL、アドレスH、ディレイ
00060Dr 1  D0 40        		bne l7e
00060Fr 1  BD rr rr     		lda EnvFrags, x
000612r 1  09 04        		ora #FRAG_NENV		;フラグを立てる
000614r 1  9D rr rr     		sta EnvFrags, x
000617r 1  A0 01        		ldy #1
000619r 1  B1 rr        		lda (Work), y
00061Br 1  9D rr rr     		sta NEnvAddr_L, x
00061Er 1  A0 02        		ldy #2
000620r 1  B1 rr        		lda (Work), y
000622r 1  9D rr rr     		sta NEnvAddr_H, x
000625r 1  A0 03        		ldy #3
000627r 1  B1 rr        		lda (Work), y
000629r 1  9D rr rr     		sta NEnvDelay, x
00062Cr 1  A9 01        		lda #1
00062Er 1  9D rr rr     		sta NEnvCtr, x
000631r 1  A9 01        		lda #1
000633r 1  9D rr rr     		sta NEnvPos, x
000636r 1  18           		clc
000637r 1  BD rr rr     		lda NEnvAddr_L, x	;相対アドレスを絶対アドレスに直す
00063Ar 1  6D rr rr     		adc SeqAddr_L
00063Dr 1  9D rr rr     		sta NEnvAddr_L, x
000640r 1  BD rr rr     		lda NEnvAddr_H, x
000643r 1  6D rr rr     		adc SeqAddr_H
000646r 1  9D rr rr     		sta NEnvAddr_H, x
000649r 1  A9 04        		lda #4
00064Br 1  20 rr rr     		jsr addptr
00064Er 1  60           		rts
00064Fr 1               	l7e:
00064Fr 1  C9 7E        		cmp #$7e			;ノートエンベロープのクリア
000651r 1  D0 0E        		bne l7f
000653r 1  BD rr rr     		lda EnvFrags, x
000656r 1  29 FB        		and #FRAG_NENV_CLR	;フラグを降ろす
000658r 1  9D rr rr     		sta EnvFrags, x
00065Br 1  A9 01        		lda #1
00065Dr 1  20 rr rr     		jsr addptr
000660r 1  60           		rts
000661r 1               	l7f:
000661r 1  C9 7F        		cmp #$7f	;トラック終了
000663r 1  D0 21        		bne leb
000665r 1  18           		clc
000666r 1  BD rr rr     		lda InfLoopAddr_L, x			;無限ループアドレスが設定されていればジャンプ
000669r 1  7D rr rr     		adc InfLoopAddr_H, x
00066Cr 1  F0 0D        		beq @E
00066Er 1  BD rr rr     		lda InfLoopAddr_L, x
000671r 1  9D rr rr     		sta Ptr_L, x
000674r 1  BD rr rr     		lda InfLoopAddr_H, x
000677r 1  9D rr rr     		sta Ptr_H, x
00067Ar 1  60           		rts
00067Br 1               	@E:
00067Br 1  BD rr rr     		lda Frags, x
00067Er 1  09 80        		ora #FRAG_END					;エンドフラグを立てる
000680r 1  29 FB        		and #FRAG_LOAD_CLR				;ロードフラグを降ろす
000682r 1  9D rr rr     		sta Frags, x
000685r 1  60           		rts
000686r 1               	leb:
000686r 1  C9 EC        		cmp #$ec	;音長ありノート
000688r 1  B0 32        		bcs lec
00068Ar 1  38           		sec
00068Br 1  E9 80        		sbc #$80
00068Dr 1  9D rr rr     		sta NoteN, x
000690r 1  BD rr rr     		lda Frags, x
000693r 1  29 08        		and #FRAG_KEYON_DIS
000695r 1  D0 08        		bne @N
000697r 1  BD rr rr     		lda Frags, x
00069Ar 1  09 01        		ora #FRAG_KEYON					;キーオンフラグを立てる
00069Cr 1  9D rr rr     		sta Frags, x
00069Fr 1               	@N:
00069Fr 1               		;キーオフ・キーオン無効・ロード・無音フラグを降ろす
00069Fr 1  BD rr rr     		lda Frags, x
0006A2r 1  29 E1        		and #FRAG_KEYOFF_CLR & FRAG_KEYON_DIS_CLR & FRAG_LOAD_CLR & FRAG_SIL_CLR
0006A4r 1  9D rr rr     		sta Frags, x
0006A7r 1  BD rr rr     		lda EnvFrags, x
0006AAr 1  29 7F        		and #FRAG_ENV_DIS_CLR	;エンベロープ無効フラグを降ろす
0006ACr 1  9D rr rr     		sta EnvFrags, x
0006AFr 1  A0 01        		ldy #1
0006B1r 1  B1 rr        		lda (Work), y
0006B3r 1  9D rr rr     		sta Length, x
0006B6r 1  A9 02        		lda #2
0006B8r 1  20 rr rr     		jsr addptr
0006BBr 1  60           		rts
0006BCr 1               	lec:
0006BCr 1  C9 EC        		cmp #$ec	;音長あり休符
0006BEr 1  D0 17        		bne led
0006C0r 1  BD rr rr     		lda Frags, x
0006C3r 1  09 02        		ora #FRAG_KEYOFF						;キーオフフラグを立てる
0006C5r 1               		;キーオン・キーオン無効・ロードフラグを降ろす
0006C5r 1  29 F2        		and #FRAG_KEYON_CLR & FRAG_KEYON_DIS_CLR & FRAG_LOAD_CLR
0006C7r 1  9D rr rr     		sta Frags, x
0006CAr 1  A0 01        		ldy #1
0006CCr 1  B1 rr        		lda (Work), y
0006CEr 1  9D rr rr     		sta Length, x
0006D1r 1  A9 02        		lda #2
0006D3r 1  20 rr rr     		jsr addptr
0006D6r 1  60           		rts
0006D7r 1               	led:
0006D7r 1  C9 ED        		cmp #$ed	;無限ループ開始
0006D9r 1  D0 12        		bne lee
0006DBr 1  A9 01        		lda #1
0006DDr 1  20 rr rr     		jsr addptr
0006E0r 1  BD rr rr     		lda Ptr_L, x
0006E3r 1  9D rr rr     		sta InfLoopAddr_L, x
0006E6r 1  BD rr rr     		lda Ptr_H, x
0006E9r 1  9D rr rr     		sta InfLoopAddr_H, x
0006ECr 1  60           		rts
0006EDr 1               	lee:
0006EDr 1  C9 EE        		cmp #$ee	;デフォ音長
0006EFr 1  D0 0D        		bne lef
0006F1r 1  A0 01        		ldy #1
0006F3r 1  B1 rr        		lda (Work), y
0006F5r 1  9D rr rr     		sta DefLen, x
0006F8r 1  A9 02        		lda #2
0006FAr 1  20 rr rr     		jsr addptr
0006FDr 1  60           		rts
0006FEr 1               	lef:
0006FEr 1  C9 EF        		cmp #$ef	;ボリューム絶対指定
000700r 1  D0 0D        		bne lf0
000702r 1  A0 01        		ldy #1
000704r 1  B1 rr        		lda (Work), y
000706r 1  9D rr rr     		sta TrVolume, x
000709r 1  A9 02        		lda #2
00070Br 1  20 rr rr     		jsr addptr
00070Er 1  60           		rts
00070Fr 1               	lf0:
00070Fr 1  C9 F0        		cmp #$f0	;ボリューム相対指定
000711r 1  D0 15        		bne lf1
000713r 1  A0 01        		ldy #1
000715r 1  B1 rr        		lda (Work), y
000717r 1  18           		clc
000718r 1  7D rr rr     		adc TrVolume, x
00071Br 1  10 02        		bpl @P
00071Dr 1  A9 00        		lda #0
00071Fr 1               	@P:
00071Fr 1  9D rr rr     		sta TrVolume, x
000722r 1  A9 02        		lda #2
000724r 1  20 rr rr     		jsr addptr
000727r 1  60           		rts
000728r 1               	lf1:
000728r 1  C9 F1        		cmp #$f1			;音色エンベロープ。引数はアドレスL、アドレスH、ディレイ
00072Ar 1  D0 40        		bne lf2
00072Cr 1  BD rr rr     		lda EnvFrags, x
00072Fr 1  09 08        		ora #FRAG_TENV		;フラグを立てる
000731r 1  9D rr rr     		sta EnvFrags, x
000734r 1  A0 01        		ldy #1
000736r 1  B1 rr        		lda (Work), y
000738r 1  9D rr rr     		sta TEnvAddr_L, x
00073Br 1  A0 02        		ldy #2
00073Dr 1  B1 rr        		lda (Work), y
00073Fr 1  9D rr rr     		sta TEnvAddr_H, x
000742r 1  A0 03        		ldy #3
000744r 1  B1 rr        		lda (Work), y
000746r 1  9D rr rr     		sta TEnvDelay, x
000749r 1  A9 01        		lda #1
00074Br 1  9D rr rr     		sta TEnvCtr, x
00074Er 1  A9 01        		lda #1
000750r 1  9D rr rr     		sta TEnvPos, x
000753r 1  18           		clc
000754r 1  BD rr rr     		lda TEnvAddr_L, x	;相対アドレスを絶対アドレスに直す
000757r 1  6D rr rr     		adc SeqAddr_L
00075Ar 1  9D rr rr     		sta TEnvAddr_L, x
00075Dr 1  BD rr rr     		lda TEnvAddr_H, x
000760r 1  6D rr rr     		adc SeqAddr_H
000763r 1  9D rr rr     		sta TEnvAddr_H, x
000766r 1  A9 04        		lda #4
000768r 1  20 rr rr     		jsr addptr
00076Br 1  60           		rts
00076Cr 1               	lf2:
00076Cr 1  C9 F2        		cmp #$f2			;音色エンベロープのクリア
00076Er 1  D0 14        		bne lf3
000770r 1  BD rr rr     		lda EnvFrags, x
000773r 1  29 F7        		and #FRAG_TENV_CLR	;フラグを降ろす
000775r 1  9D rr rr     		sta EnvFrags, x
000778r 1  BD rr rr     		lda RefTone, x
00077Br 1  9D rr rr     		sta Tone, x			;音色番号を戻す
00077Er 1  A9 01        		lda #1
000780r 1  20 rr rr     		jsr addptr
000783r 1  60           		rts
000784r 1               	lf3:
000784r 1  C9 F3        		cmp #$f3			;デチューン
000786r 1  D0 0D        		bne lf4
000788r 1  A0 01        		ldy #1
00078Ar 1  B1 rr        		lda (Work), y
00078Cr 1  9D rr rr     		sta Detune, x
00078Fr 1  A9 02        		lda #2
000791r 1  20 rr rr     		jsr addptr
000794r 1  60           		rts
000795r 1               	lf4:
000795r 1  C9 F4        		cmp #$f4			;ハードウェアスイープ
000797r 1  D0 0D        		bne lf5
000799r 1  A0 01        		ldy #1
00079Br 1  B1 rr        		lda (Work), y
00079Dr 1  9D rr rr     		sta HSwpReg, x
0007A0r 1  A9 02        		lda #2
0007A2r 1  20 rr rr     		jsr addptr
0007A5r 1  60           		rts
0007A6r 1               	lf5:
0007A6r 1  C9 F5        		cmp #$f5			;ハードウェアエンベロープ
0007A8r 1  D0 0D        		bne lf6
0007AAr 1  A0 01        		ldy #1
0007ACr 1  B1 rr        		lda (Work), y
0007AEr 1  9D rr rr     		sta HEnvReg, x
0007B1r 1  A9 02        		lda #2
0007B3r 1  20 rr rr     		jsr addptr
0007B6r 1  60           		rts
0007B7r 1               	lf6:
0007B7r 1  C9 F6        		cmp #$f6	;ソフトウェアスイープ
0007B9r 1  D0 4A        		bne lf7				;引数は開始周波数（+-半音単位）、終了周波数、Delay、Speed
0007BBr 1  BD rr rr     		lda EnvFrags, x
0007BEr 1  09 10        		ora #FRAG_SSWP		;フラグを立てる
0007C0r 1  9D rr rr     		sta EnvFrags, x
0007C3r 1  A0 01        		ldy #1
0007C5r 1  B1 rr        		lda (Work), y
0007C7r 1  9D rr rr     		sta SSwpEnd, x
0007CAr 1  A0 02        		ldy #2
0007CCr 1  B1 rr        		lda (Work), y
0007CEr 1  9D rr rr     		sta SSwpDelay, x
0007D1r 1  A0 03        		ldy #3
0007D3r 1  B1 rr        		lda (Work), y
0007D5r 1  10 0B        		bpl @N0				;speed値がマイナスだったら
0007D7r 1  9D rr rr     		sta SSwpRate, x		;その値をRate、Depthを1とする
0007DAr 1  A9 01        		lda #1
0007DCr 1  9D rr rr     		sta SSwpDepth, x
0007DFr 1  4C rr rr     		jmp @N1
0007E2r 1               	@N0:					;プラスだったら
0007E2r 1  9D rr rr     		sta SSwpDepth, x	;その値をDepth、Rateを0とする
0007E5r 1  A9 00        		lda #0
0007E7r 1  9D rr rr     		sta SSwpRate, x
0007EAr 1               	@N1:
0007EAr 1  A9 00        		lda #0
0007ECr 1  9D rr rr     		sta SSwpCtr, x		;カウンタリセット
0007EFr 1  BD rr rr     		lda SSwpEnd, x
0007F2r 1  30 0B        		bmi @neg			;変化方向がプラスならDepthをマイナスにする。マイナスなら何もしない
0007F4r 1  BD rr rr     		lda SSwpDepth, x
0007F7r 1  49 FF        		eor #$ff
0007F9r 1  18           		clc
0007FAr 1  69 01        		adc #1
0007FCr 1  9D rr rr     		sta SSwpDepth, x
0007FFr 1               	@neg:
0007FFr 1  A9 04        		lda #4
000801r 1  20 rr rr     		jsr addptr
000804r 1  60           		rts
000805r 1               	lf7:
000805r 1  C9 F7        		cmp #$f7			;ソフトウェアスイープのクリア
000807r 1  D0 0E        		bne lf8
000809r 1  BD rr rr     		lda EnvFrags, x
00080Cr 1  29 EF        		and #FRAG_SSWP_CLR	;フラグを降ろす
00080Er 1  9D rr rr     		sta EnvFrags, x
000811r 1  A9 01        		lda #1
000813r 1  20 rr rr     		jsr addptr
000816r 1  60           		rts
000817r 1               	lf8:
000817r 1  C9 F8        		cmp #$f8			;エンベロープ無効
000819r 1  D0 0E        		bne lf9
00081Br 1  BD rr rr     		lda EnvFrags, x
00081Er 1  09 80        		ora #FRAG_ENV_DIS	;エンベロープ無効フラグを立てる
000820r 1  9D rr rr     		sta EnvFrags, x
000823r 1  A9 01        		lda #1
000825r 1  20 rr rr     		jsr addptr
000828r 1  60           		rts
000829r 1               	lf9:
000829r 1  C9 F9        		cmp #$f9			;メモリ書き込み
00082Br 1  D0 1A        		bne lfa
00082Dr 1  A0 01        		ldy #1
00082Fr 1  B1 rr        		lda (Work), y
000831r 1  85 rr        		sta Work + 2
000833r 1  A0 02        		ldy #2
000835r 1  B1 rr        		lda (Work), y
000837r 1  85 rr        		sta Work + 3
000839r 1  A0 03        		ldy #3
00083Br 1  B1 rr        		lda (Work), y
00083Dr 1  A0 00        		ldy #0
00083Fr 1  91 rr        		sta (Work + 2), y
000841r 1  A9 04        		lda #4
000843r 1  20 rr rr     		jsr addptr
000846r 1  60           		rts
000847r 1               	lfa:
000847r 1  C9 FA        		cmp #$fa	;サブルーチン
000849r 1  D0 3D        		bne lend
00084Br 1  A9 03        		lda #3
00084Dr 1  20 rr rr     		jsr addptr
000850r 1  A0 01        		ldy #1
000852r 1  B1 rr        		lda (Work), y
000854r 1  85 rr        		sta Work + 2
000856r 1  C8           		iny
000857r 1  B1 rr        		lda (Work), y
000859r 1  85 rr        		sta Work + 3
00085Br 1  FE rr rr     		inc LoopDepth, x
00085Er 1  20 rr rr     		jsr loopoffset
000861r 1  B9 rr rr     		lda LoopN, y
000864r 1  18           		clc
000865r 1  69 01        		adc #1
000867r 1  99 rr rr     		sta LoopN, y
00086Ar 1  BD rr rr     		lda Ptr_L, x
00086Dr 1  99 rr rr     		sta LoopAddr_L, y
000870r 1  BD rr rr     		lda Ptr_H, x
000873r 1  99 rr rr     		sta LoopAddr_H, y
000876r 1  18           		clc
000877r 1  A5 rr        		lda Work + 2
000879r 1  6D rr rr     		adc SeqAddr_L
00087Cr 1  9D rr rr     		sta Ptr_L, x
00087Fr 1  A5 rr        		lda Work + 3
000881r 1  6D rr rr     		adc SeqAddr_H
000884r 1  9D rr rr     		sta Ptr_H, x
000887r 1  60           		rts
000888r 1               	lend:
000888r 1  60           		rts
000889r 1               .endproc
000889r 1               
000889r 1               
000889r 1               ;ノート関係の処理
000889r 1               .proc procnote
000889r 1  BD rr rr     		lda Length, x
00088Cr 1  9D rr rr     		sta LenCtr, x
00088Fr 1  BD rr rr     		lda GateBQ, x
000892r 1  D0 26        		bne @G2
000894r 1  BD rr rr     		lda GateQ, x
000897r 1  D0 14        		bne @G1
000899r 1  BD rr rr     		lda GateU, x
00089Cr 1  D0 09        		bne @G0
00089Er 1  BD rr rr     		lda LenCtr, x
0008A1r 1  9D rr rr     		sta GateCtr, x
0008A4r 1  4C rr rr     		jmp next
0008A7r 1               	@G0:					;ゲートタイム設定
0008A7r 1  9D rr rr     		sta GateCtr, x
0008AAr 1  4C rr rr     		jmp next
0008ADr 1               	@G1:
0008ADr 1  BD rr rr     		lda LenCtr, x
0008B0r 1  38           		sec
0008B1r 1  FD rr rr     		sbc GateQ, x
0008B4r 1  9D rr rr     		sta GateCtr, x
0008B7r 1  4C rr rr     		jmp next
0008BAr 1               	@G2:
0008BAr 1  A8           		tay
0008BBr 1  BD rr rr     		lda LenCtr, x
0008BEr 1  20 rr rr     		jsr ndiv8
0008C1r 1  9D rr rr     		sta GateCtr, x
0008C4r 1               	next:
0008C4r 1  BD rr rr     		lda Frags, x		;キーオフの場合これ以降は処理しない
0008C7r 1  29 02        		and #FRAG_KEYOFF
0008C9r 1  D0 43        		bne end1
0008CBr 1  BD rr rr     		lda Frags, x
0008CEr 1  29 01        		and #FRAG_KEYON	;キーオンされていない
0008D0r 1  D0 0F        		bne @N
0008D2r 1  BD rr rr     		lda EnvFrags, x
0008D5r 1  29 12        		and #FRAG_SSWP | FRAG_FENV	;かつスイープか音程エンベロープ有効
0008D7r 1  F0 08        		beq @N
0008D9r 1  BD rr rr     		lda RefNoteN, x				;かつノートが前回と同じならこれ以降は処理しない
0008DCr 1  DD rr rr     		cmp NoteN, x				;（ノート分割した時処理が途中で途切れるため）
0008DFr 1  F0 2D        		beq end1
0008E1r 1               	@N:
0008E1r 1  BD rr rr     		lda NoteN, x
0008E4r 1  18           		clc
0008E5r 1  7D rr rr     		adc KeyShift, x		;キーシフト値を加算
0008E8r 1  9D rr rr     		sta NoteN, x
0008EBr 1  9D rr rr     		sta RefNoteN, x		;ノートナンバーを記憶
0008EEr 1  BD rr rr     		lda Device, x
0008F1r 1  C9 03        		cmp #3				;ノイズとDPCM以外は周波数計算へ
0008F3r 1  F0 07        		beq noise
0008F5r 1  C9 04        		cmp #4
0008F7r 1  F0 15        		beq end1
0008F9r 1  4C rr rr     		jmp calcoct
0008FCr 1               	noise:
0008FCr 1  BD rr rr     		lda NoteN, x
0008FFr 1  29 0F        		and #$0f
000901r 1  85 rr        		sta Work + 2
000903r 1  A9 0F        		lda #$0f
000905r 1  38           		sec
000906r 1  E5 rr        		sbc Work + 2
000908r 1  9D rr rr     		sta NoteN, x
00090Br 1  9D rr rr     		sta RefNoteN, x
00090Er 1               	end1:
00090Er 1  60           		rts
00090Fr 1               	calcoct:
00090Fr 1  BD rr rr     		lda NoteN, x		;周波数計算
000912r 1  20 rr rr     		jsr calcfreq		;WorkとWork + 1に入って帰ってくる
000915r 1               	last:
000915r 1  BD rr rr     		lda Detune, x		;0でなければデチューン値を加算
000918r 1  F0 17        		beq end2
00091Ar 1  30 0C        		bmi neg
00091Cr 1  18           		clc
00091Dr 1  65 rr        		adc Work
00091Fr 1  85 rr        		sta Work
000921r 1  90 0E        		bcc end2
000923r 1  E6 rr        		inc Work + 1
000925r 1  4C rr rr     		jmp end2
000928r 1               	neg:
000928r 1  18           		clc
000929r 1  65 rr        		adc Work
00092Br 1  85 rr        		sta Work
00092Dr 1  B0 02        		bcs end2
00092Fr 1  C6 rr        		dec Work + 1
000931r 1               	end2:
000931r 1  A5 rr        		lda Work
000933r 1  9D rr rr     		sta Freq_L, x
000936r 1  9D rr rr     		sta RefFreq_L, x
000939r 1  A5 rr        		lda Work + 1
00093Br 1  9D rr rr     		sta Freq_H, x
00093Er 1  9D rr rr     		sta RefFreq_H, x
000941r 1  60           		rts
000942r 1               .endproc
000942r 1               
000942r 1               
000942r 1               ;ノートナンバーから周波数を計算する
000942r 1               ;a=ノートナンバー
000942r 1               .proc calcfreq
000942r 1  A0 00        		ldy #0
000944r 1  18           		clc
000945r 1  69 03        		adc #3
000947r 1               	@L:
000947r 1  C8           		iny
000948r 1  38           		sec
000949r 1  E9 0C        		sbc #12
00094Br 1  C9 0C        		cmp #12
00094Dr 1  B0 F8        		bcs @L
00094Fr 1               ;		dey			;周波数テーブルがo1aからなので1オクターブ下げる
00094Fr 1  88           		dey			;ノートナンバー0は-1オクターブなので1オクターブ下げる
000950r 1  10 02        		bpl load_freq
000952r 1  A0 00        		ldy #0		;マイナスになったらゼロに
000954r 1               
000954r 1               	load_freq:
000954r 1  48           		pha			;周波数テーブルから周波数を取得
000955r 1  98           		tya
000956r 1  9D rr rr     		sta Octave, x
000959r 1  68           		pla
00095Ar 1  0A           		asl a
00095Br 1  A8           		tay
00095Cr 1  B9 rr rr     		lda Freq_Tbl, y
00095Fr 1  85 rr        		sta Work
000961r 1  B9 rr rr     		lda Freq_Tbl + 1, y
000964r 1  85 rr        		sta Work + 1
000966r 1               
000966r 1               	;オクターブから周波数を計算する
000966r 1  BC rr rr     		ldy Octave, x
000969r 1               	calc_freq:
000969r 1  F0 08        		beq overflow
00096Br 1  46 rr        		lsr Work + 1
00096Dr 1  66 rr        		ror Work
00096Fr 1  88           		dey
000970r 1  4C rr rr     		jmp calc_freq
000973r 1               
000973r 1               	;オーバーフロー抑止
000973r 1               	overflow:
000973r 1  A5 rr        		lda Work + 1
000975r 1  C9 08        		cmp #$8
000977r 1  90 08        		bcc end
000979r 1  A9 07        		lda #$7
00097Br 1  85 rr        		sta Work + 1
00097Dr 1  A9 FF        		lda #$FF
00097Fr 1  85 rr        		sta Work
000981r 1               	end:
000981r 1  60           		rts
000982r 1               .endproc
000982r 1               
000982r 1               
000982r 1               ;ソフトウェアスイープ
000982r 1               .proc ssweep
000982r 1  BD rr rr     		lda Frags, x
000985r 1  29 01        		and #FRAG_KEYON
000987r 1  D0 03        		bne keyon
000989r 1  4C rr rr     		jmp start
00098Cr 1               	keyon:
00098Cr 1  BD rr rr     		lda NoteN, x
00098Fr 1  18           		clc
000990r 1  7D rr rr     		adc SSwpEnd, x			;スイープ終了周波数を計算
000993r 1  20 rr rr     		jsr calcfreq
000996r 1  A5 rr        		lda Work
000998r 1  9D rr rr     		sta SSwpEndFreq_L, x
00099Br 1  A5 rr        		lda Work + 1
00099Dr 1  9D rr rr     		sta SSwpEndFreq_H, x
0009A0r 1  BD rr rr     		lda SSwpDelay, x
0009A3r 1  18           		clc						;カウンタにディレイ値を加算
0009A4r 1  7D rr rr     		adc SSwpCtr, x
0009A7r 1  9D rr rr     		sta SSwpCtr, x
0009AAr 1  60           		rts
0009ABr 1               	start:
0009ABr 1  BD rr rr     		lda SSwpCtr, x
0009AEr 1  F0 04        		beq exec				;カウンタが0でなければデクリメントして抜ける
0009B0r 1  DE rr rr     		dec SSwpCtr, x
0009B3r 1  60           		rts
0009B4r 1               	exec:
0009B4r 1  BD rr rr     		lda SSwpDepth, x
0009B7r 1  30 12        		bmi @M
0009B9r 1  BD rr rr     		lda RefFreq_L, x			;周波数に加算
0009BCr 1  18           		clc
0009BDr 1  7D rr rr     		adc SSwpDepth, x
0009C0r 1  9D rr rr     		sta RefFreq_L, x
0009C3r 1  90 15        		bcc detect
0009C5r 1  FE rr rr     		inc RefFreq_H, x
0009C8r 1  4C rr rr     		jmp detect
0009CBr 1               	@M:							;マイナス値の場合
0009CBr 1  BD rr rr     		lda RefFreq_L, x			;周波数に加算
0009CEr 1  18           		clc
0009CFr 1  7D rr rr     		adc SSwpDepth, x
0009D2r 1  9D rr rr     		sta RefFreq_L, x
0009D5r 1  B0 03        		bcs detect
0009D7r 1  DE rr rr     		dec RefFreq_H, x
0009DAr 1               	detect:
0009DAr 1  BD rr rr     		lda SSwpEnd, x			;終了判定
0009DDr 1  10 13        		bpl pos
0009DFr 1  BD rr rr     		lda RefFreq_H, x	;変化がマイナス方向の場合
0009E2r 1  DD rr rr     		cmp SSwpEndFreq_H, x
0009E5r 1  90 1E        		bcc end					;終了値より大きくなったら終了
0009E7r 1  BD rr rr     		lda RefFreq_L, x
0009EAr 1  DD rr rr     		cmp SSwpEndFreq_L, x			;下位バイトも比較
0009EDr 1  90 16        		bcc end
0009EFr 1  4C rr rr     		jmp clear
0009F2r 1               	pos:
0009F2r 1  BD rr rr     		lda SSwpEndFreq_H, x			;変化がプラス方向の場合
0009F5r 1  DD rr rr     		cmp RefFreq_H, x
0009F8r 1  90 0B        		bcc end					;終了値より小さくなったら終了（レジスタ値が小さい方が高いので）
0009FAr 1  BD rr rr     		lda SSwpEndFreq_L, x
0009FDr 1  DD rr rr     		cmp RefFreq_L, x
000A00r 1  90 03        		bcc end
000A02r 1  4C rr rr     		jmp clear
000A05r 1               	end:
000A05r 1  BD rr rr     		lda RefFreq_L, x
000A08r 1  9D rr rr     		sta Freq_L, x
000A0Br 1  BD rr rr     		lda RefFreq_H, x
000A0Er 1  9D rr rr     		sta Freq_H, x
000A11r 1  BD rr rr     		lda SSwpRate, x			;Rateをカウンタに代入して抜ける
000A14r 1  9D rr rr     		sta SSwpCtr, x
000A17r 1  60           		rts
000A18r 1               	clear:
000A18r 1  BD rr rr     		lda SSwpEndFreq_L, x	;終了値を代入
000A1Br 1  9D rr rr     		sta RefFreq_L, x
000A1Er 1  9D rr rr     		sta Freq_L, x
000A21r 1  BD rr rr     		lda SSwpEndFreq_H, x
000A24r 1  9D rr rr     		sta RefFreq_H, x
000A27r 1  9D rr rr     		sta Freq_H, x
000A2Ar 1  60           		rts
000A2Br 1               .endproc
000A2Br 1               
000A2Br 1               
000A2Br 1               ;音量エンベロープ
000A2Br 1               .proc volenv
000A2Br 1  BD rr rr     		lda VEnvAddr_L, x
000A2Er 1  85 rr        		sta Work + 2
000A30r 1  BD rr rr     		lda VEnvAddr_H, x
000A33r 1  85 rr        		sta Work + 3
000A35r 1  BD rr rr     		lda Frags, x
000A38r 1  29 02        		and #FRAG_KEYOFF
000A3Ar 1  D0 1B        		bne keyoff
000A3Cr 1  BD rr rr     		lda Frags, x
000A3Fr 1  29 01        		and #FRAG_KEYON
000A41r 1  D0 03        		bne keyon
000A43r 1  4C rr rr     		jmp other
000A46r 1               	keyon:
000A46r 1  A9 01        		lda #1
000A48r 1  9D rr rr     		sta VEnvPos, x		;キーオン位置に移動
000A4Br 1  A9 01        		lda #1
000A4Dr 1  18           		clc
000A4Er 1  7D rr rr     		adc VEnvDelay, x	;ディレイを加算
000A51r 1  9D rr rr     		sta VEnvCtr, x
000A54r 1  4C rr rr     		jmp other
000A57r 1               	keyoff:
000A57r 1  A0 00        		ldy #0
000A59r 1  B1 rr        		lda (Work + 2), y
000A5Br 1  29 80        		and #%10000000		;ヘッダ1個目に最上位ビットが立っていたらキーオフ無効
000A5Dr 1  D0 0A        		bne other
000A5Fr 1  A0 01        		ldy #1
000A61r 1  B1 rr        		lda (Work + 2), y
000A63r 1  9D rr rr     		sta VEnvPos, x		;キーオフ位置に移動
000A66r 1  4C rr rr     		jmp get
000A69r 1               	other:
000A69r 1  BD rr rr     		lda VEnvCtr, x
000A6Cr 1  C9 01        		cmp #1
000A6Er 1  D0 4C        		bne end				;カウンタが1でなければカウントして終了
000A70r 1  C9 00        		cmp #0
000A72r 1  F0 4B        		beq ret				;0になったらrts
000A74r 1  BD rr rr     		lda VEnvPos, x
000A77r 1  A0 01        		ldy #1
000A79r 1  D1 rr        		cmp (Work + 2), y
000A7Br 1  D0 09        		bne get				;ヘッダ2番目（キーオフ位置）に達したら
000A7Dr 1  A0 00        		ldy #0				;ヘッダ1番目（ループ位置）に戻る
000A7Fr 1  B1 rr        		lda (Work + 2), y
000A81r 1  29 7F        		and #%01111111		;最上位ビットを消す
000A83r 1  9D rr rr     		sta VEnvPos, x
000A86r 1               	get:
000A86r 1  BD rr rr     		lda VEnvPos, x
000A89r 1  0A           		asl a
000A8Ar 1  A8           		tay
000A8Br 1  B1 rr        		lda (Work + 2), y	;アドレスにあるデータを取得（音量）
000A8Dr 1  9D rr rr     		sta Volume, x		;いったん保存
000A90r 1  C8           		iny
000A91r 1  B1 rr        		lda (Work + 2), y	;アドレスにあるデータを取得（フレーム数）
000A93r 1  9D rr rr     		sta VEnvCtr, x		;カウンタに代入
000A96r 1  FE rr rr     		inc VEnvPos, x		;エンベロープ位置移動
000A99r 1  BD rr rr     		lda Volume, x
000A9Cr 1  F0 13        		beq frag			;0ならこれ以降処理しない
000A9Er 1  BC rr rr     		ldy TrVolume, x		;トラックボリュームを掛ける
000AA1r 1               	@L:
000AA1r 1  18           		clc
000AA2r 1  7D rr rr     		adc Volume, x
000AA5r 1  88           		dey
000AA6r 1  D0 F9        		bne @L
000AA8r 1  4A           		lsr a				;16で割る
000AA9r 1  4A           		lsr a
000AAAr 1  4A           		lsr a
000AABr 1  4A           		lsr a
000AACr 1  9D rr rr     		sta Volume, x
000AAFr 1  D0 0E        		bne ret
000AB1r 1               	frag:
000AB1r 1  BD rr rr     		lda Frags, x
000AB4r 1  09 10        		ora #FRAG_SIL		;0なら無音フラグを立てる
000AB6r 1  9D rr rr     		sta Frags, x
000AB9r 1  4C rr rr     		jmp ret
000ABCr 1               	end:
000ABCr 1  DE rr rr     		dec VEnvCtr, x
000ABFr 1               	ret:
000ABFr 1  60           		rts
000AC0r 1               .endproc
000AC0r 1               
000AC0r 1               
000AC0r 1               ;音程エンベロープ
000AC0r 1               .proc freqenv
000AC0r 1  BD rr rr     		lda FEnvAddr_L, x
000AC3r 1  85 rr        		sta Work + 2
000AC5r 1  BD rr rr     		lda FEnvAddr_H, x
000AC8r 1  85 rr        		sta Work + 3
000ACAr 1  BD rr rr     		lda Frags, x
000ACDr 1  29 02        		and #FRAG_KEYOFF
000ACFr 1  D0 1B        		bne keyoff
000AD1r 1  BD rr rr     		lda Frags, x
000AD4r 1  29 01        		and #FRAG_KEYON
000AD6r 1  D0 03        		bne keyon
000AD8r 1  4C rr rr     		jmp other
000ADBr 1               	keyon:
000ADBr 1  A9 01        		lda #1
000ADDr 1  9D rr rr     		sta FEnvPos, x		;キーオン位置に移動
000AE0r 1  A9 01        		lda #1
000AE2r 1  18           		clc
000AE3r 1  7D rr rr     		adc FEnvDelay, x	;ディレイを加算
000AE6r 1  9D rr rr     		sta FEnvCtr, x
000AE9r 1  4C rr rr     		jmp other
000AECr 1               	keyoff:
000AECr 1  A0 00        		ldy #0
000AEEr 1  B1 rr        		lda (Work + 2), y
000AF0r 1  29 80        		and #%10000000		;ヘッダ1個目に最上位ビットが立っていたらキーオフ無効
000AF2r 1  D0 0A        		bne other
000AF4r 1  A0 01        		ldy #1
000AF6r 1  B1 rr        		lda (Work + 2), y
000AF8r 1  9D rr rr     		sta FEnvPos, x		;キーオフ位置に移動
000AFBr 1  4C rr rr     		jmp get
000AFEr 1               	other:
000AFEr 1  BD rr rr     		lda FEnvCtr, x
000B01r 1  C9 01        		cmp #1
000B03r 1  D0 4F        		bne end				;カウンタが1でなければカウントして終了
000B05r 1  C9 00        		cmp #0
000B07r 1  F0 4E        		beq ret				;0になったらrts
000B09r 1  BD rr rr     		lda FEnvPos, x
000B0Cr 1  A0 01        		ldy #1
000B0Er 1  D1 rr        		cmp (Work + 2), y
000B10r 1  D0 09        		bne get				;ヘッダ2番目（キーオフ位置）に達したら
000B12r 1  A0 00        		ldy #0				;ヘッダ1番目（ループ位置）に戻る
000B14r 1  B1 rr        		lda (Work + 2), y
000B16r 1  29 7F        		and #%01111111		;最上位ビットを消す
000B18r 1  9D rr rr     		sta FEnvPos, x
000B1Br 1               	get:
000B1Br 1  BD rr rr     		lda FEnvPos, x
000B1Er 1  0A           		asl a
000B1Fr 1  A8           		tay
000B20r 1  B1 rr        		lda (Work + 2), y	;アドレスにあるデータを取得
000B22r 1  49 FF        		eor #$ff
000B24r 1  18           		clc
000B25r 1  69 01        		adc #1				;符号反転
000B27r 1  30 12        		bmi neg				;負の値だったら
000B29r 1  18           		clc
000B2Ar 1  7D rr rr     		adc RefFreq_L, x	;周波数に加算
000B2Dr 1  9D rr rr     		sta Freq_L, x
000B30r 1  BD rr rr     		lda RefFreq_H, x
000B33r 1  69 00        		adc #0
000B35r 1  9D rr rr     		sta Freq_H, x
000B38r 1  4C rr rr     		jmp next
000B3Br 1               	neg:
000B3Br 1  18           		clc
000B3Cr 1  7D rr rr     		adc RefFreq_L, x	;周波数に加算
000B3Fr 1  9D rr rr     		sta Freq_L, x
000B42r 1  BD rr rr     		lda RefFreq_H, x
000B45r 1  E9 00        		sbc #0
000B47r 1  9D rr rr     		sta Freq_H, x
000B4Ar 1               	next:
000B4Ar 1  C8           		iny
000B4Br 1  B1 rr        		lda (Work + 2), y		;アドレスにあるデータを取得（フレーム数）
000B4Dr 1  9D rr rr     		sta FEnvCtr, x		;カウンタに代入
000B50r 1  FE rr rr     		inc FEnvPos, x		;エンベロープ位置移動
000B53r 1  60           		rts
000B54r 1               	end:
000B54r 1  DE rr rr     		dec FEnvCtr, x
000B57r 1               	ret:
000B57r 1  60           		rts
000B58r 1               .endproc
000B58r 1               
000B58r 1               
000B58r 1               ;ノートエンベロープ
000B58r 1               .proc noteenv
000B58r 1  BD rr rr     		lda NEnvAddr_L, x
000B5Br 1  85 rr        		sta Work + 2
000B5Dr 1  BD rr rr     		lda NEnvAddr_H, x
000B60r 1  85 rr        		sta Work + 3
000B62r 1  BD rr rr     		lda Frags, x
000B65r 1  29 02        		and #FRAG_KEYOFF
000B67r 1  D0 1B        		bne keyoff
000B69r 1  BD rr rr     		lda Frags, x
000B6Cr 1  29 01        		and #FRAG_KEYON
000B6Er 1  D0 03        		bne keyon
000B70r 1  4C rr rr     		jmp other
000B73r 1               	keyon:
000B73r 1  A9 01        		lda #1
000B75r 1  9D rr rr     		sta NEnvPos, x		;キーオン位置に移動
000B78r 1  A9 01        		lda #1
000B7Ar 1  18           		clc
000B7Br 1  7D rr rr     		adc NEnvDelay, x	;ディレイを加算
000B7Er 1  9D rr rr     		sta NEnvCtr, x
000B81r 1  4C rr rr     		jmp other
000B84r 1               	keyoff:
000B84r 1  A0 00        		ldy #0
000B86r 1  B1 rr        		lda (Work + 2), y
000B88r 1  29 80        		and #%10000000		;ヘッダ1個目に最上位ビットが立っていたらキーオフ無効
000B8Ar 1  D0 0A        		bne other
000B8Cr 1  A0 01        		ldy #1
000B8Er 1  B1 rr        		lda (Work + 2), y
000B90r 1  9D rr rr     		sta NEnvPos, x		;キーオフ位置に移動
000B93r 1  4C rr rr     		jmp get
000B96r 1               	other:
000B96r 1  BD rr rr     		lda NEnvCtr, x
000B99r 1  C9 01        		cmp #1
000B9Br 1  D0 57        		bne end				;カウンタが1でなければカウントして終了
000B9Dr 1  C9 00        		cmp #0
000B9Fr 1  F0 56        		beq ret				;0になったらrts
000BA1r 1  BD rr rr     		lda NEnvPos, x
000BA4r 1  A0 01        		ldy #1
000BA6r 1  D1 rr        		cmp (Work + 2), y
000BA8r 1  D0 09        		bne get				;ヘッダ2番目（キーオフ位置）に達したら
000BAAr 1  A0 00        		ldy #0				;ヘッダ1番目（ループ位置）に戻る
000BACr 1  B1 rr        		lda (Work + 2), y
000BAEr 1  29 7F        		and #%01111111		;最上位ビットを消す
000BB0r 1  9D rr rr     		sta NEnvPos, x
000BB3r 1               	get:
000BB3r 1  BD rr rr     		lda NEnvPos, x
000BB6r 1  0A           		asl a
000BB7r 1  A8           		tay
000BB8r 1  BD rr rr     		lda Device, x
000BBBr 1  C9 03        		cmp #3				;ノイズとDPCM以外は下へ
000BBDr 1  B0 1E        		bcs @N
000BBFr 1  B1 rr        		lda (Work + 2), y		;アドレスにあるデータを取得
000BC1r 1  18           		clc
000BC2r 1  7D rr rr     		adc RefNoteN, x		;ノートナンバーに加算
000BC5r 1  9D rr rr     		sta NoteN, x
000BC8r 1  20 rr rr     		jsr calcfreq		;周波数計算
000BCBr 1  A5 rr        		lda Work
000BCDr 1  9D rr rr     		sta Freq_L, x
000BD0r 1  A5 rr        		lda Work + 1
000BD2r 1  9D rr rr     		sta Freq_H, x
000BD5r 1  BD rr rr     		lda NEnvPos, x
000BD8r 1  0A           		asl a
000BD9r 1  A8           		tay
000BDAr 1  4C rr rr     		jmp last
000BDDr 1               	@N:
000BDDr 1  B1 rr        		lda (Work + 2), y		;アドレスにあるデータを取得
000BDFr 1  49 FF        		eor	#$ff				;反転して加算
000BE1r 1  18           		clc
000BE2r 1  69 01        		adc #1
000BE4r 1  7D rr rr     		adc RefNoteN, x
000BE7r 1  9D rr rr     		sta NoteN, x
000BEAr 1               	last:
000BEAr 1  C8           		iny
000BEBr 1  B1 rr        		lda (Work + 2), y		;アドレスにあるデータを取得（フレーム数）
000BEDr 1  9D rr rr     		sta NEnvCtr, x		;カウンタに代入
000BF0r 1  FE rr rr     		inc NEnvPos, x		;エンベロープ位置移動
000BF3r 1  60           		rts
000BF4r 1               	end:
000BF4r 1  DE rr rr     		dec NEnvCtr, x
000BF7r 1               	ret:
000BF7r 1  60           		rts
000BF8r 1               .endproc
000BF8r 1               
000BF8r 1               
000BF8r 1               ;音色エンベロープ
000BF8r 1               .proc toneenv
000BF8r 1  BD rr rr     		lda TEnvAddr_L, x
000BFBr 1  85 rr        		sta Work + 2
000BFDr 1  BD rr rr     		lda TEnvAddr_H, x
000C00r 1  85 rr        		sta Work + 3
000C02r 1  BD rr rr     		lda Frags, x
000C05r 1  29 02        		and #FRAG_KEYOFF
000C07r 1  D0 1B        		bne keyoff
000C09r 1  BD rr rr     		lda Frags, x
000C0Cr 1  29 01        		and #FRAG_KEYON
000C0Er 1  D0 03        		bne keyon
000C10r 1  4C rr rr     		jmp other
000C13r 1               	keyon:
000C13r 1  A9 01        		lda #1
000C15r 1  9D rr rr     		sta TEnvPos, x		;キーオン位置に移動
000C18r 1  A9 01        		lda #1
000C1Ar 1  18           		clc
000C1Br 1  7D rr rr     		adc TEnvDelay, x	;ディレイを加算
000C1Er 1  9D rr rr     		sta TEnvCtr, x
000C21r 1  4C rr rr     		jmp other
000C24r 1               	keyoff:
000C24r 1  A0 00        		ldy #0
000C26r 1  B1 rr        		lda (Work + 2), y
000C28r 1  29 80        		and #%10000000		;ヘッダ1個目に最上位ビットが立っていたらキーオフ無効
000C2Ar 1  D0 0A        		bne other
000C2Cr 1  A0 01        		ldy #1
000C2Er 1  B1 rr        		lda (Work + 2), y
000C30r 1  9D rr rr     		sta TEnvPos, x		;キーオフ位置に移動
000C33r 1  4C rr rr     		jmp get
000C36r 1               	other:
000C36r 1  BD rr rr     		lda TEnvCtr, x
000C39r 1  C9 01        		cmp #1
000C3Br 1  D0 2B        		bne end				;カウンタが1でなければカウントして終了
000C3Dr 1  C9 00        		cmp #0
000C3Fr 1  F0 2A        		beq ret				;0になったらrts
000C41r 1  BD rr rr     		lda TEnvPos, x
000C44r 1  A0 01        		ldy #1
000C46r 1  D1 rr        		cmp (Work + 2), y
000C48r 1  D0 09        		bne get				;ヘッダ2番目（キーオフ位置）に達したら
000C4Ar 1  A0 00        		ldy #0				;ヘッダ1番目（ループ位置）に戻る
000C4Cr 1  B1 rr        		lda (Work + 2), y
000C4Er 1  29 7F        		and #%01111111		;最上位ビットを消す
000C50r 1  9D rr rr     		sta TEnvPos, x
000C53r 1               	get:
000C53r 1  BD rr rr     		lda TEnvPos, x
000C56r 1  0A           		asl a
000C57r 1  A8           		tay
000C58r 1  B1 rr        		lda (Work + 2), y		;アドレスにあるデータを取得
000C5Ar 1  18           		clc
000C5Br 1  9D rr rr     		sta Tone, x			;代入
000C5Er 1  C8           		iny
000C5Fr 1  B1 rr        		lda (Work + 2), y		;アドレスにあるデータを取得（フレーム数）
000C61r 1  9D rr rr     		sta TEnvCtr, x		;カウンタに代入
000C64r 1  FE rr rr     		inc TEnvPos, x		;エンベロープ位置移動
000C67r 1  60           		rts
000C68r 1               	end:
000C68r 1  DE rr rr     		dec TEnvCtr, x
000C6Br 1               	ret:
000C6Br 1  60           		rts
000C6Cr 1               .endproc
000C6Cr 1               
000C6Cr 1               
000C6Cr 1               ;ポインタをa個進める
000C6Cr 1               .proc addptr
000C6Cr 1  18           		clc
000C6Dr 1  7D rr rr     		adc Ptr_L, x
000C70r 1  9D rr rr     		sta Ptr_L, x
000C73r 1  90 03        		bcc @E
000C75r 1  FE rr rr     		inc Ptr_H, x
000C78r 1               	@E:
000C78r 1  60           		rts
000C79r 1               .endproc
000C79r 1               
000C79r 1               
000C79r 1               ;ループ値のあるアドレスのオフセットを計算してyにセット
000C79r 1               .proc loopoffset
000C79r 1  BD rr rr     		lda LoopDepth, x
000C7Cr 1  38           		sec
000C7Dr 1  E9 01        		sbc #1				;深度1がメモリ0の位置なので1引く
000C7Fr 1  AE rr rr     		ldx ProcTr			;xが0なら終了
000C82r 1  F0 06        		beq @E
000C84r 1               	@L:
000C84r 1  18           		clc
000C85r 1  69 03        		adc #MAX_LOOP
000C87r 1  CA           		dex
000C88r 1  D0 FA        		bne @L
000C8Ar 1               	@E:
000C8Ar 1  AE rr rr     		ldx ProcTr
000C8Dr 1  A8           		tay
000C8Er 1  60           		rts
000C8Fr 1               .endproc
000C8Fr 1               
000C8Fr 1               
000C8Fr 1               ;n/8 aに割る数、yにnを入れて渡す
000C8Fr 1               .proc ndiv8
000C8Fr 1  85 rr        		sta Work + 2
000C91r 1  A9 00        		lda #0
000C93r 1  85 rr        		sta Work + 3
000C95r 1  A5 rr        		lda Work + 2
000C97r 1               	@L:
000C97r 1  88           		dey
000C98r 1  F0 0A        		beq @E
000C9Ar 1  18           		clc
000C9Br 1  65 rr        		adc Work + 2
000C9Dr 1  90 F8        		bcc @L
000C9Fr 1  E6 rr        		inc Work + 3
000CA1r 1  4C rr rr     		jmp @L
000CA4r 1               	@E:
000CA4r 1  85 rr        		sta Work + 2
000CA6r 1  46 rr        		lsr Work + 3
000CA8r 1  66 rr        		ror Work + 2
000CAAr 1  46 rr        		lsr Work + 3
000CACr 1  66 rr        		ror Work + 2
000CAEr 1  46 rr        		lsr Work + 3
000CB0r 1  66 rr        		ror Work + 2
000CB2r 1  A5 rr        		lda Work + 2
000CB4r 1  60           		rts
000CB5r 1               .endproc
000CB5r 1               
000CB5r 1               
000CB5r 1               .rodata
000000r 1               Freq_Tbl:
000000r 1               ;	.word	$07e7
000000r 1               ;	.word	$0775
000000r 1               ;	.word	$0709
000000r 1               ;	.word	$06a3
000000r 1               ;	.word	$0643
000000r 1               ;	.word	$05e9
000000r 1               ;	.word	$0593
000000r 1               ;	.word	$0543
000000r 1               ;	.word	$04f6
000000r 1               ;	.word	$04ae
000000r 1               ;	.word	$046b
000000r 1               ;	.word	$042a
000000r 1               
000000r 1  C3 0F        	.word	$0fc3
000002r 1  E0 0E        	.word	$0ee0
000004r 1  08 0E        	.word	$0e08
000006r 1  3C 0D        	.word	$0d3c
000008r 1  7D 0C        	.word	$0c7d
00000Ar 1  C7 0B        	.word	$0bc7
00000Cr 1  1C 0B        	.word	$0b1c
00000Er 1  7B 0A        	.word	$0a7b
000010r 1  E2 09        	.word	$09e2
000012r 1  53 09        	.word	$0953
000014r 1  CB 08        	.word	$08cb
000016r 1  4A 08        	.word	$084a
000018r 1               
000018r 1               Length_Tbl:
000018r 1  40           	.byte	64
000019r 1  30           	.byte	48
00001Ar 1  20           	.byte	32
00001Br 1  18           	.byte	24
00001Cr 1  10           	.byte	16
00001Dr 1  0C           	.byte	12
00001Er 1  08           	.byte	8
00001Fr 1  06           	.byte	6
000020r 1  04           	.byte	4
000021r 1  03           	.byte	3
000022r 1  02           	.byte	2
000023r 1  01           	.byte	1
000023r 1               
