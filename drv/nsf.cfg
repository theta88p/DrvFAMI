MEMORY {
    ZP:         start = $0000, size = $0100, type = rw, define = yes;

    # NSF Header
    HEADER:     start = $0000, size = $0080, file = %O, fill = yes;

    # 2 16K ROM Banks
    # - startup
    # - code
    # - rodata
    # - data (load)
    # 2A03
    #ROM0:       start = $8000, size = $0cf0, file = %O ,fill = yes, define = yes;
    # VRC6
    #ROM0:       start = $8000, size = $0d80, file = %O ,fill = yes, define = yes;
    # MMC5
    ROM0:       start = $8000, size = $0d60, file = %O ,fill = yes, define = yes;

	#// 8k ROM Banks
	#// - Music data
    # 2A03
    #ROMD:       start = $8cf0, size = $33e0, file = %O ,fill = yes, define = yes;
    # VRC6
    #ROMD:       start = $8d80, size = $3280, file = %O ,fill = yes, define = yes;
    # MMC5
    ROMD:       start = $8d60, size = $32a0, file = %O ,fill = yes, define = yes;

	#//  8k ROM Banks
	#// - DPCM data
	ROMP:       start = $c000, size = $4000, file = %O ,fill = yes, define = yes;

    # Hardware Vectors at End of 2nd 8K ROM
#    ROMV:       start = $fffa, size = $0006, file = %O, fill = yes;

    # 1 8k CHR Bank
#    ROM2:       start = $0000, size = $2000, file = %O, fill = yes;

    # standard 2k SRAM (-zeropage)
    # $0100-$0200 cpu stack
    # $0200-$0600 ram
    STACK:      start = $0100, size = $0200,         type = rw, define = yes;
    RAM:        start = $0200, size = $0600,         type = rw, define = yes;

    # additional 8K SRAM Bank
#   SRAM:       start = $6000, size = $2000, type = rw, define = yes;
}

SEGMENTS {
    HEADER:     load = HEADER,          type = ro;
    MUSDATA:    load = ROMD,            type = ro,  define = yes;
    PCMDATA:    load = ROMP,            type = ro,  define = yes;
    STARTUP:    load = ROM0,            type = ro,  define = yes;
    LOWCODE:    load = ROM0,            type = ro,                optional = yes;
    INIT:       load = ROM0,            type = ro,  define = yes, optional = yes;
    CODE:       load = ROM0,            type = ro,  define = yes;
    RODATA:     load = ROM0,            type = ro,  define = yes;
#   DATA:       load = ROM0, run = RAM, type = rw,  define = yes;
#    VECTORS:    load = ROMV,            type = rw;
#    CHARS:      load = ROM2,            type = rw;
    BSS:        load = RAM,             type = bss, define = yes;
    ZEROPAGE:   load = ZP,              type = zp;
}
